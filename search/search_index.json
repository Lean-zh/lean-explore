{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LeanExplore Documentation","text":"<p>Welcome to the LeanExplore documentation! This is your central hub for understanding how to navigate and utilize the LeanExplore Python package effectively. Find the project on GitHub.</p> <p>LeanExplore is a Python package offering a powerful semantic search engine and versatile toolkit for Lean 4 projects. It assists Lean users in efficiently finding code through semantic search\u2014leveraging vector-based similarity from embeddings of both formal Lean statements and their informal counterparts\u2014and in exploring the dependencies of these statements to gain deeper insights. LeanExplore serves as a valuable component for building custom tools, enhancing proof development workflows, and integrating Lean's structured knowledge into AI applications.</p>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li>Versatile Search Capabilities: Find Lean statements with precision. Search semantically to discover code based on conceptual meaning, or search directly by known declaration names for targeted results.</li> <li>Interactive AI Assistance: Utilize an AI-powered chat interface (via the CLI) to ask questions about Lean code, receive explanations, and explore dependencies conversationally.</li> <li>Flexible Data Backends: Choose to operate with a fully local dataset for complete offline access and control, or leverage our convenient remote API for zero-setup searching capabilities.</li> <li>Comprehensive CLI Toolkit: Manage local data, configure settings, perform searches, and launch AI interactions directly from your terminal.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The best way to begin your journey with LeanExplore is by following our Quickstart Guide. This guide will walk you through the initial setup and your first key interactions with the package, ensuring you get up and running smoothly.</p> <p>Once you're familiar with the basics, you can explore these areas for more detailed information on specific functionalities:</p> <ul> <li>Using the Command-Line Interface (CLI): Master the full range of available commands and options for various tasks from data management to AI chat.</li> <li>Performing Searches: Learn how to search programmatically, whether you're using local data resources or interacting with the remote API.</li> <li>MCP (AI Agents): Discover how to integrate LeanExplore with AI agent systems for advanced applications and custom tool development.</li> </ul> <p>For a detailed look at every function, class, and module within the LeanExplore package, including their parameters and return types, please browse the API Reference section available in the sidebar.</p>"},{"location":"cli/search/","title":"Performing Searches with LeanExplore","text":"<p>LeanExplore offers flexible and powerful ways to search for Lean mathematical statements and definitions, catering to different needs and workflows. This guide details how to perform searches programmatically using either the remote LeanExplore API for immediate access or local data resources for offline capabilities. These methods allow you to integrate LeanExplore's search engine into your custom Python tools or analyses.</p>"},{"location":"cli/search/#contents","title":"Contents","text":"<ul> <li>Searching via the Remote API</li> <li>Prerequisites</li> <li>Programmatic Access (Asynchronous)</li> <li>Internal Usage by CLI</li> <li>Searching with Local Data</li> <li>Prerequisites</li> <li>Programmatic Access</li> <li>Internal Usage by CLI</li> </ul>"},{"location":"cli/search/#searching-via-the-remote-api","title":"Searching via the Remote API","text":"<p>Using the remote API is a quick way to get started, as it offloads data hosting and search computation to the LeanExplore servers. All you need is an API key and an internet connection. The methods in the API client are asynchronous. For use in IPython or Jupyter, top-level <code>await</code> can often be used directly.</p>"},{"location":"cli/search/#prerequisites","title":"Prerequisites","text":"<ul> <li>The <code>lean_explore</code> Python package installed (<code>pip install lean-explore</code>). This includes the <code>httpx</code> library required by the API client.</li> <li>Your personal LeanExplore API key. You can obtain one from leanexplore.com/api-keys.</li> <li>This API key should be configured using the CLI for easy loading:   <pre><code>leanexplore configure api-key YOUR_API_KEY_HERE\n</code></pre>   Alternatively, set the <code>LEANEXPLORE_API_KEY</code> environment variable.</li> </ul>"},{"location":"cli/search/#programmatic-access-asynchronous","title":"Programmatic Access (Asynchronous)","text":""},{"location":"cli/search/#1-initializing-the-api-client","title":"1. Initializing the API Client","text":"<p>Import necessary modules and initialize the client. This assumes your API key is configured.</p> <pre><code>import asyncio\nfrom lean_explore.api.client import Client\nfrom lean_explore.cli import config_utils\n\n# Load API key (ensure it's configured via CLI or ENV variable)\napi_key = config_utils.load_api_key() \nclient = Client(api_key=api_key)\nprint(\"API Client initialized.\")\n</code></pre>"},{"location":"cli/search/#2-performing-a-search","title":"2. Performing a Search","text":"<p>Use the <code>client.search()</code> method. It returns an <code>APISearchResponse</code> object. (Requires <code>client</code> from step 1).</p> <pre><code># Define query and limit for displaying results\nquery_str_api = \"fundamental theorem of calculus\"\ndisplay_limit_api = 3\n\n# Perform the search (use 'await' in an async context e.g. IPython, Jupyter, or async script)\nsearch_response_api = await client.search(query=query_str_api)\n\nprint(f\"\\nFound {search_response_api.count} API results for '{query_str_api}':\")\nfor item_api in search_response_api.results[:display_limit_api]:\n    name_api = (item_api.primary_declaration.lean_name\n                if item_api.primary_declaration else \"N/A\")\n    print(f\"  ID: {item_api.id}, Name: {name_api}\")\n    print(f\"    File: {item_api.source_file}:{item_api.range_start_line}\")\n\n# Example: Get ID of the first result, assuming results are present\napi_first_result_id = search_response_api.results[0].id\nprint(f\"ID of the first API result: {api_first_result_id}\")\n</code></pre>"},{"location":"cli/search/#3-retrieving-a-statement-group-by-id","title":"3. Retrieving a Statement Group by ID","text":"<p>Use <code>client.get_by_id()</code>. (Requires <code>client</code> and <code>api_first_result_id</code> from previous steps).</p> <pre><code># Use the ID obtained from the search results\nitem_details_api = await client.get_by_id(group_id=api_first_result_id)\n\nname_details_api = (item_details_api.primary_declaration.lean_name\n                    if item_details_api.primary_declaration else \"N/A\")\nprint(f\"\\nDetails for API Statement Group ID {item_details_api.id}: Name: {name_details_api}\")\n# print(f\"  Statement: {item_details_api.statement_text}\")\n</code></pre>"},{"location":"cli/search/#4-fetching-dependencies","title":"4. Fetching Dependencies","text":"<p>Use <code>client.get_dependencies()</code>. (Requires <code>client</code> and <code>api_first_result_id</code>).</p> <pre><code># Use the ID obtained from the search results\ndeps_response_api = await client.get_dependencies(group_id=api_first_result_id)\n\nprint(f\"\\nAPI Dependencies for Group ID {deps_response_api.source_group_id}\\n  ({deps_response_api.count} found):\")\nfor citation_api in deps_response_api.citations:\n    name_deps_api = (citation_api.primary_declaration.lean_name\n                     if citation_api.primary_declaration else \"N/A\")\n    print(f\"  - Dep ID: {citation_api.id}, Name: {name_deps_api}\")\n</code></pre> <p>Note on Running Async Code: The <code>await</code> keyword is used for API calls. In a standalone Python script, you would typically wrap these calls in an <code>async def</code> function and run it using <code>asyncio.run()</code>. In environments like IPython 7.0+ or Jupyter notebooks, top-level <code>await</code> is often supported directly.</p>"},{"location":"cli/search/#internal-usage-by-cli","title":"Internal Usage by CLI","text":"<p>The LeanExplore CLI commands such as <code>leanexplore search</code>, <code>get</code>, <code>dependencies</code>, and <code>leanexplore chat --backend api</code> (which is the default for chat if an API key is set) all utilize this <code>lean_explore.api.client.Client</code> internally.</p>"},{"location":"cli/search/#searching-with-local-data","title":"Searching with Local Data","text":"<p>This mode allows you to perform searches directly on your machine using a local dataset. It leverages a SQLite database for structured information, a FAISS vector index for efficient semantic matching, and local sentence embedding models to process your queries. This is ideal for offline use, custom data analysis, or when you prefer full control over the data assets.</p>"},{"location":"cli/search/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>The <code>lean_explore</code> Python package installed.</li> <li>The local data toolchain must be downloaded and available. You can do this using the CLI command:   <pre><code>leanexplore data fetch\n</code></pre>   This ensures the database and FAISS index are present in the expected location (typically <code>~/.lean_explore/data/toolchains/&lt;version&gt;/</code>).</li> </ul>"},{"location":"cli/search/#programmatic-access","title":"Programmatic Access","text":""},{"location":"cli/search/#1-initializing-the-local-service","title":"1. Initializing the Local Service","text":"<p>Import and instantiate the <code>lean_explore.local.service.Service</code> class. This assumes data files are correctly downloaded.</p> <pre><code>from lean_explore.local.service import Service\n\n# Assumes Service() initializes successfully (data files are present)\nservice_instance = Service()\nprint(\"LocalService initialized successfully.\")\n</code></pre>"},{"location":"cli/search/#2-performing-a-search_1","title":"2. Performing a Search","text":"<p>Use the <code>service.search()</code> method. It returns an <code>APISearchResponse</code> object. (Requires <code>service_instance</code> from step 1).</p> <pre><code># Define query and limit\nquery_str_local = \"ring definition\"\nlimit_for_local = 3\n\nsearch_response_local = service_instance.search(\n    query=query_str_local, \n    limit=limit_for_local\n)\n\nprint(f\"\\nFound {search_response_local.count} local results for '{query_str_local}':\")\nfor item_local in search_response_local.results: # Already limited by service.search\n    name_local = (item_local.primary_declaration.lean_name\n                  if item_local.primary_declaration else \"N/A\")\n    print(f\"  ID: {item_local.id}, Name: {name_local}\")\n    print(f\"    File: {item_local.source_file}:{item_local.range_start_line}\")\n\n# Example: Get ID of the first result, assuming results are present\nlocal_first_result_id = search_response_local.results[0].id\nprint(f\"ID of the first local result: {local_first_result_id}\")\n</code></pre>"},{"location":"cli/search/#3-retrieving-a-statement-group-by-id_1","title":"3. Retrieving a Statement Group by ID","text":"<p>Use <code>service.get_by_id()</code>. (Requires <code>service_instance</code> and <code>local_first_result_id</code>).</p> <pre><code># Use the ID obtained from the local search results\nitem_details_local = service_instance.get_by_id(\n    group_id=local_first_result_id\n)\n\nname_details_local = (item_details_local.primary_declaration.lean_name\n                      if item_details_local.primary_declaration else \"N/A\")\nprint(f\"\\nDetails for Local Statement Group ID {item_details_local.id}: Name: {name_details_local}\")\n# print(f\"  Statement: {item_details_local.statement_text}\")\n</code></pre>"},{"location":"cli/search/#4-fetching-dependencies_1","title":"4. Fetching Dependencies","text":"<p>Use <code>service.get_dependencies()</code>. (Requires <code>service_instance</code> and <code>local_first_result_id</code>).</p> <pre><code># Use the ID obtained from the local search results\ndeps_response_local = service_instance.get_dependencies(\n    group_id=local_first_result_id\n)\n\nprint(f\"\\nLocal Dependencies for Group ID {deps_response_local.source_group_id}\\n  ({deps_response_local.count} found):\")\nfor citation_local in deps_response_local.citations:\n    name_deps_local = (citation_local.primary_declaration.lean_name\n                       if citation_local.primary_declaration else \"N/A\")\n    print(f\"  - Dep ID: {citation_local.id}, Name: {name_deps_local}\")\n</code></pre>"},{"location":"cli/search/#internal-usage-by-cli_1","title":"Internal Usage by CLI","text":"<p>The LeanExplore CLI commands <code>leanexplore chat --backend local</code> and <code>leanexplore mcp serve --backend local</code> make use of this <code>lean_explore.local.service.Service</code> class to interact with your local data toolchain.</p>"},{"location":"cli/usage/","title":"Using the LeanExplore CLI","text":"<p>The LeanExplore Command-Line Interface (CLI), invoked using the <code>leanexplore</code> command, is your primary tool for interacting with the LeanExplore ecosystem. It empowers you to configure settings, manage local data, search the LeanExplore API directly, explore code with an AI assistant, and control the Model Context Protocol (MCP) server for more advanced integrations.</p>"},{"location":"cli/usage/#contents","title":"Contents","text":"<ul> <li>Understanding CLI Basics</li> <li>Getting Started: Initial Setup</li> <li>Configuring Your API Keys</li> <li>(Optional) Preparing for Local Data Exploration</li> <li>Finding and Inspecting Lean Code (via API)</li> <li>Searching for Lean Statements</li> <li>Viewing Detailed Information</li> <li>Exploring Code Dependencies</li> <li>Interactive Exploration with the AI Chat Assistant</li> <li>Launching the Chat Session</li> <li>Understanding Key Chat Options</li> <li>Integrating with AI Agents via the MCP Server</li> <li>Running the Server</li> <li>Key Server Options</li> </ul>"},{"location":"cli/usage/#understanding-cli-basics","title":"Understanding CLI Basics","text":"<p>Most CLI commands follow the structure: <code>leanexplore [OPTIONS] COMMAND [ARGS]...</code>. To get help at any point, whether for the main command or a specific subcommand, simply append <code>--help</code>:</p> <pre><code>leanexplore --help\n</code></pre> <pre><code>leanexplore configure --help\n</code></pre> <pre><code>leanexplore data fetch --help\n</code></pre>"},{"location":"cli/usage/#getting-started-initial-setup","title":"Getting Started: Initial Setup","text":"<p>Before diving into all of LeanExplore's features, a few initial setup steps can ensure everything runs smoothly, especially when interacting with online services or the AI assistant.</p>"},{"location":"cli/usage/#configuring-your-api-keys","title":"Configuring Your API Keys","text":"<p>LeanExplore uses API keys to authenticate access to certain services. These are stored securely in a local configuration file once set up.</p> <p>LeanExplore API Key: This key is essential for features that communicate with the remote LeanExplore API, such as direct searches (<code>search</code>, <code>get</code>, <code>dependencies</code> commands) and using the AI chat with its default API backend.</p> <p>You can obtain your LeanExplore API key from https://www.leanexplore.com/api-keys. Once you have it, configure it by running:</p> <pre><code>leanexplore configure api-key\n</code></pre> <p>You will be prompted to enter your key. This is typically a one-time setup.</p> <p>OpenAI API Key: If you plan to use the AI-powered chat features (<code>leanexplore chat</code>), you'll also need an OpenAI API key. Configure it with:</p> <pre><code>leanexplore configure openai-key\n</code></pre> <p>Follow the prompts to enter your OpenAI key.</p>"},{"location":"cli/usage/#optional-preparing-for-local-data-exploration","title":"(Optional) Preparing for Local Data Exploration","text":"<p>For users who prefer to work offline or have direct control over the dataset, LeanExplore supports a local data toolchain. This involves downloading the necessary data assets to your machine.</p> <p>To download and set up the primary local data toolchain, use the command:</p> <pre><code>leanexplore data fetch\n</code></pre> <p>This command fetches the SQLite database (containing Lean project information), FAISS search indexes for semantic search, and associated mapping files. These are installed into a local directory, typically within <code>~/.lean_explore/data/toolchains/</code>.</p> <p>Note: The data toolchain can be several gigabytes. The initial download may take some time depending on your internet connection. This step is a prerequisite for using features that rely on a local backend, such as <code>leanexplore chat --backend local</code> or <code>leanexplore mcp serve --backend local</code>.</p>"},{"location":"cli/usage/#finding-and-inspecting-lean-code-via-api","title":"Finding and Inspecting Lean Code (via API)","text":"<p>Once your LeanExplore API key is configured, you can directly query the remote API to find and inspect Lean statements. These commands provide quick access to the wealth of information indexed by LeanExplore.</p>"},{"location":"cli/usage/#searching-for-lean-statements","title":"Searching for Lean Statements","text":"<p>To search for Lean statement groups based on a natural language query, use the <code>leanexplore search</code> command:</p> <pre><code>leanexplore search \"your query string here\" [OPTIONS]\n</code></pre> <p>For example, to find statements related to the \"fundamental theorem of calculus\", limit the results, and filter by the \"Mathlib\" package:</p> <pre><code>leanexplore search \"fundamental theorem of calculus\" --package Mathlib --limit 3\n</code></pre> <p>Key Options for Searching:</p> <ul> <li><code>QUERY_STRING</code>: Your search terms. Enclose in quotes if it contains spaces.</li> <li><code>--package TEXT</code> (or <code>-p TEXT</code>): Filter results by specific package names (e.g., <code>Mathlib</code>, <code>Std</code>). This option can be used multiple times to include several packages.</li> <li><code>--limit INTEGER</code> (or <code>-n INTEGER</code>): Specify the maximum number of search results to display. Defaults to 5.</li> </ul> <p>The command will display a list of matching statement groups, including their ID, Lean name, source file location, and relevant code or docstring snippets.</p>"},{"location":"cli/usage/#viewing-detailed-information","title":"Viewing Detailed Information","text":"<p>If you have a specific statement group ID (often obtained from search results), you can retrieve its full details using <code>leanexplore get</code>:</p> <pre><code>leanexplore get &lt;GROUP_ID&gt;\n</code></pre> <p>For instance:</p> <pre><code>leanexplore get 12345\n</code></pre> <p>This shows comprehensive information for the group, such as its full statement text, docstring, and any informal descriptions, usually presented in easy-to-read formatted panels.</p>"},{"location":"cli/usage/#exploring-code-dependencies","title":"Exploring Code Dependencies","text":"<p>To understand how a statement group connects to others, you can fetch its direct dependencies (items it cites) using <code>leanexplore dependencies</code>:</p> <pre><code>leanexplore dependencies &lt;GROUP_ID&gt;\n</code></pre> <p>Example:</p> <pre><code>leanexplore dependencies 12345\n</code></pre> <p>This command lists the statement groups that the specified group depends on, typically in a table format showing each dependency's ID, Lean name, and source location.</p>"},{"location":"cli/usage/#interactive-exploration-with-the-ai-chat-assistant","title":"Interactive Exploration with the AI Chat Assistant","text":"<p>LeanExplore provides an AI-powered chat assistant (<code>leanexplore chat</code>) for a conversational way to search, understand, and explore Lean code.</p> <p>Prerequisites:</p> <ul> <li>Your OpenAI API key must be configured (using <code>leanexplore configure openai-key</code>).</li> <li>For the default API backend: Your LeanExplore API key must be configured.</li> <li>For the local backend: Your local data toolchain must be fetched (using <code>leanexplore data fetch</code>).</li> </ul>"},{"location":"cli/usage/#launching-the-chat-session","title":"Launching the Chat Session","text":"<p>To start a chat session using the default API backend (recommended for most users, providing access to the latest data):</p> <pre><code>leanexplore chat\n</code></pre> <p>If you've set up local data and prefer to use that (e.g., for offline access):</p> <pre><code>leanexplore chat --backend local\n</code></pre>"},{"location":"cli/usage/#understanding-key-chat-options","title":"Understanding Key Chat Options","text":"<ul> <li><code>--backend {api|local}</code> (alias: <code>-lb</code>): Specifies the data source for the AI's tools.</li> <li><code>api</code> (default): The agent queries the remote LeanExplore API.</li> <li><code>local</code>: The agent uses your downloaded local data.</li> <li><code>--lean-api-key TEXT</code>: (Optional) If using the API backend, you can provide a LeanExplore API key for the current session, overriding any configured key.</li> <li><code>--debug</code>: Enables detailed debug logging for both the chat client and the underlying MCP server it manages. This is useful for troubleshooting.</li> </ul> <p>Once in the chat, you can ask the assistant to perform tasks like \"Find definitions of 'monoid' in Mathlib\" or \"Show me the dependencies of <code>Nat.add</code>\".</p>"},{"location":"cli/usage/#integrating-with-ai-agents-via-the-mcp-server","title":"Integrating with AI Agents via the MCP Server","text":"<p>This is an advanced feature for developers aiming to integrate LeanExplore's search and retrieval capabilities as tools within their own custom AI agent applications or other programmatic setups.</p> <p>The <code>leanexplore mcp serve</code> command launches the LeanExplore Model Context Protocol (MCP) server. This server communicates via standard input/output (stdio) using JSON-RPC 2.0 and exposes LeanExplore's functionalities as \"tools\" that an MCP-compatible agent client can call.</p>"},{"location":"cli/usage/#running-the-server","title":"Running the Server","text":"<p>To serve tools using the remote API backend (ensure LeanExplore API key is configured or provide it with <code>--api-key</code>):</p> <pre><code>leanexplore mcp serve --backend api\n</code></pre> <p>To serve tools using your local data backend (ensure local data has been fetched):</p> <pre><code>leanexplore mcp serve --backend local\n</code></pre>"},{"location":"cli/usage/#key-server-options","title":"Key Server Options","text":"<ul> <li><code>--backend {api|local}</code> (alias: <code>-b</code>): Determines if the server's tools will use the remote API or local data. Defaults to <code>api</code>.</li> <li><code>--api-key TEXT</code>: (Required if <code>--backend api</code> and no key is configured) Directly provide the LeanExplore API key for the server to use.</li> </ul> <p>Note: The <code>leanexplore chat</code> command internally manages an instance of this MCP server. Running <code>leanexplore mcp serve</code> directly is typically for scenarios where you are connecting a different MCP client or agent framework.</p> <p>By familiarizing yourself with these commands and workflows, you can effectively leverage the LeanExplore CLI for your mathematical explorations and development in Lean 4.</p>"},{"location":"getting-started/quickstart/","title":"Quickstart Guide","text":"<p>Welcome to the LeanExplore Quickstart Guide! This page will walk you through the essential first steps to get up and running with LeanExplore using its powerful remote API and Command-Line Interface (CLI). Our goal is to help you perform your first meaningful actions quickly.</p>"},{"location":"getting-started/quickstart/#prerequisites-installation","title":"Prerequisites: Installation","text":"<p>Before you begin, ensure you have LeanExplore installed. If not, you can install it using pip:</p> <pre><code>pip install lean-explore\n</code></pre> <p>This guide focuses on using the LeanExplore API, which is the default mode for many commands and provides a zero-setup way to access search and AI features once your API keys are configured.</p>"},{"location":"getting-started/quickstart/#step-1-obtain-your-leanexplore-api-key","title":"Step 1: Obtain Your LeanExplore API Key","text":"<p>To interact with the LeanExplore API, you'll need a personal API key. This key authenticates your requests to our servers. If you don't have one, please visit https://www.leanexplore.com/api-keys to sign up or log in and obtain your API key.</p>"},{"location":"getting-started/quickstart/#step-2-configure-your-leanexplore-api-key","title":"Step 2: Configure Your LeanExplore API Key","text":"<p>Once you have your API key, the next step is to configure it with the LeanExplore CLI. This will save your key securely for future use, so you don't have to enter it every time.</p> <p>Run the following command in your terminal:</p> <pre><code>leanexplore configure api-key\n</code></pre> <p>You will be prompted to paste your API key. This is a one-time setup. If you've already done this, you can proceed to the next step.</p>"},{"location":"getting-started/quickstart/#step-3-perform-your-first-search","title":"Step 3: Perform Your First Search","text":"<p>With your API key configured, you're ready to perform your first search directly from the command line. Let's try searching for a well-known theorem:</p> <pre><code>leanexplore search \"fundamental theorem of calculus\"\n</code></pre> <p>You should see a list of relevant Lean statements matching your query, along with details like their source file, line number, and a snippet of the code. This demonstrates the direct search capability of LeanExplore via its API.</p>"},{"location":"getting-started/quickstart/#step-4-try-the-ai-chat-via-api","title":"Step 4: Try the AI Chat (via API)","text":"<p>LeanExplore also offers an AI-powered chat assistant for a more interactive way to explore Lean code. By default, if your LeanExplore API key is configured, the chat will use the API backend. For the AI capabilities, you'll also need an OpenAI API key.</p>"},{"location":"getting-started/quickstart/#4a-configure-openai-api-key-if-needed","title":"4a. Configure OpenAI API Key (If Needed)","text":"<p>If you haven't set up your OpenAI API key with LeanExplore yet, run:</p> <pre><code>leanexplore configure openai-key\n</code></pre> <p>Follow the prompts. If this key is already configured, you can skip this sub-step.</p>"},{"location":"getting-started/quickstart/#4b-start-the-chat-session","title":"4b. Start the Chat Session","text":"<p>Now, launch the AI chat assistant:</p> <pre><code>leanexplore chat\n</code></pre> <p>Since your LeanExplore API key is configured and <code>--backend api</code> is the default, the assistant will use the remote API for its Lean-specific knowledge.</p>"},{"location":"getting-started/quickstart/#4c-ask-a-question","title":"4c. Ask a Question","text":"<p>Once the chat interface loads and the assistant is ready, try asking it to find a specific definition and its context, for example:</p> <pre><code>You: Find the formal statement for the 'fundamental theorem of calculus'\nand tell me about its main dependencies.\n</code></pre>"},{"location":"getting-started/quickstart/#step-5-observe-the-results","title":"Step 5: Observe the Results","text":"<p>The AI assistant will process your query. It uses the LeanExplore API to search for formal statements related to the 'fundamental theorem of calculus', identify the most relevant one(s), and then find and list their main dependencies. You should expect a conversational response that includes the formal Lean code for the theorem, along with explanations and other contextual information to help you understand its structure and connections within the library.</p>"},{"location":"getting-started/quickstart/#congratulations-next-steps","title":"Congratulations &amp; Next Steps","text":"<p>You've now successfully used LeanExplore to perform a direct API search and to interact with the AI chat assistant! These are two of the primary ways to leverage LeanExplore's capabilities.</p> <p>From here, you can:</p> <ul> <li>Dive deeper into all command-line options in the Using the CLI guide.</li> <li>Learn about using local data and programmatic access (both local and API) in the Performing Searches section.</li> <li>If you're interested in building custom AI agent integrations, explore the MCP (AI Agents) documentation.</li> </ul>"},{"location":"mcp/agents/","title":"LeanExplore MCP Server for AI Agents","text":"<p>LeanExplore includes a Model Context Protocol (MCP) server designed to expose its powerful search and data retrieval functionalities as Tools that AI agents can utilize. This enables developers to build intelligent applications\u2014for example, those using the <code>openai-agents</code> library or other agentic frameworks\u2014that can programmatically interact with and reason about Lean 4 codebases through LeanExplore.</p>"},{"location":"mcp/agents/#contents","title":"Contents","text":"<ul> <li>Overview of the LeanExplore MCP Server</li> <li>Integrating with MCP Client Applications</li> <li>Running the LeanExplore MCP Server</li> <li>Command Invocation</li> <li>Key Command-Line Options</li> <li>Server Behavior</li> <li>Exposed Tools for AI Agents</li> <li>Tool: search</li> <li>Tool: get_by_id</li> <li>Tool: get_dependencies</li> <li>Relationship with leanexplore chat</li> <li>Notes for Custom Agent Developers</li> </ul>"},{"location":"mcp/agents/#overview-of-the-leanexplore-mcp-server","title":"Overview of the LeanExplore MCP Server","text":"<p>The LeanExplore MCP server acts as a dedicated interface for AI agents. It listens for requests, typically formatted as JSON-RPC 2.0 messages, over standard input/output (stdio). When an agent sends a request to use a tool, the server translates this into an action within the LeanExplore system\u2014querying either the remote LeanExplore API or your local data backend, depending on its configuration.</p> <p>After processing the request, the server returns the results to the agent, allowing for a dynamic, programmatic interaction. This server is built using the <code>FastMCP</code> library, part of the broader MCP Python SDK.</p>"},{"location":"mcp/agents/#integrating-with-mcp-client-applications","title":"Integrating with MCP Client Applications","text":"<p>The LeanExplore MCP server can be integrated as a tool provider with various MCP-compatible client applications. These clients allow you to manage and interact with multiple AI tools and models from a unified interface. An example of such an application is Claude Desktop.</p> <p>To configure an MCP client like Claude Desktop to use the LeanExplore MCP server, you typically need to provide a configuration that specifies how to launch the server. Here's an example of what such a configuration would look like in the client application's settings (often a JSON file):</p> <pre><code>{\n  \"mcpServers\": {\n    \"leanexploreAPI\": {\n      \"command\": \"/path/to/your/leanexplore/package\",\n      \"args\": [\n        \"mcp\",\n        \"serve\",\n        \"--backend\",\n        \"api\",\n        \"--api-key\",\n        \"YOUR_ACTUAL_LEANEXPLORE_API_KEY\"\n      ]\n    }\n  }\n}\n</code></pre> <p>After setting up this configuration in your MCP client application, it should be able to list LeanExplore as an available tool provider and use the tools (<code>search</code>, <code>get_by_id</code>, <code>get_dependencies</code>) exposed by the server.</p> <p>For more details on setting up applications like Claude Desktop with MCP servers, refer to their specific documentation. For Claude Desktop, you can find information at their quickstart guide.</p>"},{"location":"mcp/agents/#running-the-leanexplore-mcp-server","title":"Running the LeanExplore MCP Server","text":"<p>You can launch the MCP server directly from the command line using the <code>leanexplore mcp serve</code> command. This command is intended for developers who are building or connecting their own custom MCP client applications or AI agents.</p>"},{"location":"mcp/agents/#command-invocation","title":"Command Invocation","text":"<p>Here are typical ways to start the server:</p> <pre><code># Start server using the API backend (default)\n# Requires LeanExplore API key to be configured or passed via --api-key\nleanexplore mcp serve --backend api\n\n# Start server using your local data backend\n# Requires local data to be fetched via 'leanexplore data fetch'\nleanexplore mcp serve --backend local\n\n# Example with specific API key and debug logging for the API backend\nleanexplore mcp serve --backend api --api-key YOUR_LE_API_KEY --log-level DEBUG\n</code></pre>"},{"location":"mcp/agents/#key-command-line-options","title":"Key Command-Line Options","text":"<ul> <li><code>--backend {api|local}</code> (alias: <code>-b</code>) Determines the data source for the server's tools:</li> <li><code>api</code>: Tools will query the remote LeanExplore API. Prerequisite: A valid LeanExplore API key must be configured (via <code>leanexplore configure api-key</code>) or provided directly using the <code>--api-key</code> option. This backend typically provides access to the most current data and offloads computation.</li> <li><code>local</code>: Tools will use your locally downloaded data assets (SQLite database, FAISS index). Prerequisite: You must first download the data toolchain using <code>leanexplore data fetch</code>. This backend allows for offline use and full control over the data version.</li> <li><code>--api-key TEXT</code> (Optional) If using <code>--backend api</code>, this option allows you to provide the LeanExplore API key directly for the current server session, overriding any globally configured key.</li> <li><code>--log-level {DEBUG|INFO|WARNING|ERROR|CRITICAL}</code> Sets the logging verbosity for the server. Using <code>DEBUG</code> is helpful for troubleshooting. Default is typically <code>ERROR</code> or <code>WARNING</code> to minimize noise.</li> </ul>"},{"location":"mcp/agents/#server-behavior","title":"Server Behavior","text":"<p>When started, the <code>leanexplore mcp serve</code> command runs the server continuously in the foreground. It takes over your terminal's standard input and output (stdio) to communicate with the connected MCP client.</p> <p>To stop the server, the connected client application should typically initiate a disconnect. Alternatively, you can manually terminate the server process in your terminal (usually with Ctrl+C).</p>"},{"location":"mcp/agents/#exposed-tools-for-ai-agents","title":"Exposed Tools for AI Agents","text":"<p>The LeanExplore MCP server makes its core functionalities available to AI agents as callable \"tools\". These tools allow an agent to programmatically search and retrieve information about Lean statements. The structure of the returned data items (referred to as <code>ResultItem</code> below) is consistent across tools that return statement group information.</p> <p>A <code>ResultItem</code> object includes the following fields:</p> <ul> <li><code>id: integer</code> - Unique identifier of the statement group.</li> <li><code>primary_declaration: object | null</code> - Information about the primary declaration:</li> <li><code>lean_name: string | null</code> - The full Lean name (e.g., \"Nat.add\").</li> <li><code>source_file: string</code> - The source file path (e.g., \"Mathlib/Data/Nat/Basic.lean\").</li> <li><code>range_start_line: integer</code> - The starting line number of the statement group in the source file.</li> <li><code>statement_text: string</code> - The full canonical Lean code text of the statement group.</li> <li><code>docstring: string | null</code> - The docstring associated with the statement group, if available.</li> <li><code>informal_description: string | null</code> - An informal, human-readable description, if available.</li> </ul>"},{"location":"mcp/agents/#tool-search","title":"Tool: <code>search</code>","text":"<ul> <li>Purpose: Enables the agent to find Lean statement groups based on a natural language query.</li> <li>Key Parameters:</li> <li><code>query: string</code> (required) - The natural language search query (e.g., \"continuous function\").</li> <li><code>package_filters: string[]</code> (optional) - A list of package names to filter results by (e.g., <code>[\"Mathlib.Analysis\", \"Mathlib.Order\"]</code>). If omitted or empty, no package filter is applied.</li> <li><code>limit: integer</code> (optional, default: 10) - The maximum number of search results to return. Must be a positive integer.</li> <li>Returns: An object containing the search results and metadata, with the following fields:</li> <li><code>query: string</code> - The original search query string submitted.</li> <li><code>packages_applied: string[] | null</code> - List of package filters that were actually applied to the search.</li> <li><code>results: ResultItem[]</code> - A list of <code>ResultItem</code> objects matching the query, structured as described above.</li> <li><code>count: integer</code> - The number of results provided in the <code>results</code> list (respecting the <code>limit</code> parameter).</li> <li><code>total_candidates_considered: integer</code> - The total number of potential candidate results found by the backend before the <code>limit</code> was applied by the tool.</li> <li><code>processing_time_ms: integer</code> - Server-side processing time for the search request in milliseconds.</li> </ul>"},{"location":"mcp/agents/#tool-get_by_id","title":"Tool: <code>get_by_id</code>","text":"<ul> <li>Purpose: Allows the agent to retrieve detailed information for a specific statement group using its unique ID.</li> <li>Key Parameters:</li> <li><code>group_id: integer</code> (required) - The unique identifier of the statement group to retrieve (e.g., <code>12345</code>).</li> <li>Returns: A single <code>ResultItem</code> object (structured as described above) if a statement group with the given ID is found. Returns <code>null</code> if no such group exists.</li> </ul>"},{"location":"mcp/agents/#tool-get_dependencies","title":"Tool: <code>get_dependencies</code>","text":"<ul> <li>Purpose: Enables the agent to fetch the direct dependencies (i.e., items cited by or relied upon) for a given statement group ID.</li> <li>Key Parameters:</li> <li><code>group_id: integer</code> (required) - The unique identifier of the statement group for which to fetch dependencies (e.g., <code>12345</code>).</li> <li>Returns: An object containing the dependencies if found, otherwise <code>null</code>. The object has the following fields:</li> <li><code>source_group_id: integer</code> - The ID of the statement group for which dependencies were requested.</li> <li><code>citations: ResultItem[]</code> - A list of <code>ResultItem</code> objects representing the direct dependencies. Each item is structured as described above.</li> <li><code>count: integer</code> - The number of direct dependencies found and returned in the <code>citations</code> list.</li> </ul> <p>Returns <code>null</code> if the source statement group is not found or has no dependencies.</p> <p>Illustrative Agent Workflow: An AI agent might first use the <code>search</code> tool to discover statements related to a concept (e.g., \"Frobenius homomorphism\"). From the results, it could pick a statement ID that seems most relevant. Then, it might call <code>get_by_id</code> to retrieve the full Lean code for that statement, followed by a call to <code>get_dependencies</code> to understand its immediate context and the definitions it relies on. This sequence allows the agent to gather comprehensive information for reasoning or explanation tasks.</p>"},{"location":"mcp/agents/#relationship-with-leanexplore-chat","title":"Relationship with <code>leanexplore chat</code>","text":"<p>The <code>leanexplore chat</code> command provides a ready-to-use AI assistant for interactive exploration. It's important to understand that this chat command internally manages its own instance of the LeanExplore MCP server and acts as an MCP client to it.</p> <p>Therefore, you do not need to run <code>leanexplore mcp serve</code> separately to use the <code>leanexplore chat</code> feature. The <code>leanexplore mcp serve</code> command is specifically for developers who wish to connect their own custom AI agents or other MCP client applications to LeanExplore's toolset.</p>"},{"location":"mcp/agents/#notes-for-custom-agent-developers","title":"Notes for Custom Agent Developers","text":"<ul> <li>Communication Protocol: The LeanExplore MCP server communicates using JSON-RPC 2.0 messages exchanged over standard input/output (stdio). Your custom agent client must be able to spawn the server process and communicate with it via its stdin/stdout streams.</li> <li>Client Implementation: To interact with this server, you'll need an MCP client. The MCP Python SDK (which provides the <code>mcp</code> library used by LeanExplore) includes utilities like <code>ClientSession</code> and <code>stdio_client</code> for building such clients. Frameworks like <code>openai-agents</code> are also designed to work with MCP-compliant servers.</li> <li>Tool Schemas (Pydantic Models): While this page provides an overview of tool parameters and return structures, the precise definitions are implemented as Pydantic models. Developers needing the exact model schemas (e.g., for robust client-side validation or code generation) should refer to the source code in the <code>lean_explore.shared.models.api.py</code> module (for response data structures like <code>APISearchResultItem</code>, <code>APISearchResponse</code>, <code>APICitationsResponse</code>) and <code>lean_explore.mcp.tools.py</code> (for tool function signatures) within the LeanExplore Python package. The tool names called by the agent (e.g., \"search\") correspond to the function names registered as tools.</li> <li>Troubleshooting Server Issues: If you encounter problems when your custom client interacts with the server, running <code>leanexplore mcp serve</code> with the <code>--log-level DEBUG</code> option can provide verbose logs from the server side, which can be invaluable for diagnosing issues related to server startup, backend connections, or tool execution.</li> </ul> <p>By providing this MCP interface, LeanExplore aims to be a valuable component in the ecosystem of AI tools for mathematical research and Lean development, enabling sophisticated programmatic access to its indexed knowledge base of Lean code.</p>"},{"location":"zh/","title":"LeanExplore \u6587\u6863","text":"<p>\u6b22\u8fce\u6765\u5230 LeanExplore \u6587\u6863\uff01\u8fd9\u91cc\u662f\u60a8\u7406\u89e3\u5982\u4f55\u6709\u6548\u5bfc\u822a\u548c\u4f7f\u7528 LeanExplore Python \u5305\u7684\u4e2d\u5fc3\u67a2\u7ebd\u3002\u5728 GitHub \u4e0a\u67e5\u627e\u9879\u76ee\u3002</p> <p>LeanExplore \u662f\u4e00\u4e2a Python \u5305\uff0c\u4e3a Lean 4 \u9879\u76ee\u63d0\u4f9b\u5f3a\u5927\u7684\u8bed\u4e49\u641c\u7d22\u5f15\u64ce\u548c\u591a\u529f\u80fd\u5de5\u5177\u5305\u3002\u5b83\u901a\u8fc7\u8bed\u4e49\u641c\u7d22\u5e2e\u52a9 Lean \u7528\u6237\u9ad8\u6548\u5730\u67e5\u627e\u4ee3\u7801\u2014\u2014\u5229\u7528\u57fa\u4e8e\u6b63\u5f0f Lean \u8bed\u53e5\u53ca\u5176\u975e\u6b63\u5f0f\u5bf9\u5e94\u7269\u5d4c\u5165\u7684\u5411\u91cf\u76f8\u4f3c\u6027\u2014\u2014\u5e76\u63a2\u7d22\u8fd9\u4e9b\u8bed\u53e5\u7684\u4f9d\u8d56\u5173\u7cfb\u4ee5\u83b7\u5f97\u66f4\u6df1\u5165\u7684\u89c1\u89e3\u3002LeanExplore \u662f\u6784\u5efa\u81ea\u5b9a\u4e49\u5de5\u5177\u3001\u589e\u5f3a\u8bc1\u660e\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\u4ee5\u53ca\u5c06 Lean \u7684\u7ed3\u6784\u5316\u77e5\u8bc6\u96c6\u6210\u5230 AI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5b9d\u8d35\u7ec4\u4ef6\u3002</p>"},{"location":"zh/#_1","title":"\u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u591a\u529f\u80fd\u641c\u7d22\u80fd\u529b\uff1a \u7cbe\u786e\u67e5\u627e Lean \u8bed\u53e5\u3002\u901a\u8fc7\u8bed\u4e49\u641c\u7d22\u57fa\u4e8e\u6982\u5ff5\u542b\u4e49\u53d1\u73b0\u4ee3\u7801\uff0c\u6216\u901a\u8fc7\u5df2\u77e5\u58f0\u660e\u540d\u79f0\u76f4\u63a5\u641c\u7d22\u4ee5\u83b7\u5f97\u6709\u9488\u5bf9\u6027\u7684\u7ed3\u679c\u3002</li> <li>\u4ea4\u4e92\u5f0f AI \u52a9\u624b\uff1a \u5229\u7528 AI \u9a71\u52a8\u7684\u804a\u5929\u754c\u9762\uff08\u901a\u8fc7 CLI\uff09\u8be2\u95ee\u6709\u5173 Lean \u4ee3\u7801\u7684\u95ee\u9898\uff0c\u63a5\u6536\u89e3\u91ca\uff0c\u5e76\u4ee5\u5bf9\u8bdd\u65b9\u5f0f\u63a2\u7d22\u4f9d\u8d56\u5173\u7cfb\u3002</li> <li>\u7075\u6d3b\u7684\u6570\u636e\u540e\u7aef\uff1a \u9009\u62e9\u4f7f\u7528\u5b8c\u5168\u672c\u5730\u6570\u636e\u96c6\u8fdb\u884c\u5b8c\u6574\u7684\u79bb\u7ebf\u8bbf\u95ee\u548c\u63a7\u5236\uff0c\u6216\u5229\u7528\u6211\u4eec\u4fbf\u6377\u7684\u8fdc\u7a0b API \u5b9e\u73b0\u96f6\u8bbe\u7f6e\u641c\u7d22\u529f\u80fd\u3002</li> <li>\u5168\u9762\u7684 CLI \u5de5\u5177\u5305\uff1a \u76f4\u63a5\u4ece\u7ec8\u7aef\u7ba1\u7406\u672c\u5730\u6570\u636e\u3001\u914d\u7f6e\u8bbe\u7f6e\u3001\u6267\u884c\u641c\u7d22\u548c\u542f\u52a8 AI \u4ea4\u4e92\u3002</li> </ul>"},{"location":"zh/#_2","title":"\u5165\u95e8\u6307\u5357","text":"<p>\u5f00\u59cb\u60a8\u7684 LeanExplore \u4e4b\u65c5\u7684\u6700\u4f73\u65b9\u5f0f\u662f\u9075\u5faa\u6211\u4eec\u7684 \u5feb\u901f\u5165\u95e8\u6307\u5357\u3002\u672c\u6307\u5357\u5c06\u5f15\u5bfc\u60a8\u5b8c\u6210\u521d\u59cb\u8bbe\u7f6e\u548c\u4e0e\u5305\u7684\u7b2c\u4e00\u6b21\u5173\u952e\u4ea4\u4e92\uff0c\u786e\u4fdd\u60a8\u987a\u5229\u542f\u52a8\u548c\u8fd0\u884c\u3002</p> <p>\u4e00\u65e6\u60a8\u719f\u6089\u4e86\u57fa\u7840\u77e5\u8bc6\uff0c\u60a8\u53ef\u4ee5\u63a2\u7d22\u8fd9\u4e9b\u9886\u57df\u4ee5\u83b7\u53d6\u6709\u5173\u7279\u5b9a\u529f\u80fd\u7684\u66f4\u8be6\u7ec6\u4fe1\u606f\uff1a</p> <ul> <li>\u4f7f\u7528\u547d\u4ee4\u884c\u754c\u9762 (CLI)\uff1a\u638c\u63e1\u4ece\u6570\u636e\u7ba1\u7406\u5230 AI \u804a\u5929\u7684\u5404\u79cd\u4efb\u52a1\u7684\u5168\u90e8\u53ef\u7528\u547d\u4ee4\u548c\u9009\u9879\u3002</li> <li>\u6267\u884c\u641c\u7d22\uff1a\u5b66\u4e60\u5982\u4f55\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u641c\u7d22\uff0c\u65e0\u8bba\u60a8\u662f\u4f7f\u7528\u672c\u5730\u6570\u636e\u8d44\u6e90\u8fd8\u662f\u4e0e\u8fdc\u7a0b API \u4ea4\u4e92\u3002</li> <li>MCP (AI \u4ee3\u7406)\uff1a\u4e86\u89e3\u5982\u4f55\u5c06 LeanExplore \u4e0e AI \u4ee3\u7406\u7cfb\u7edf\u96c6\u6210\u4ee5\u8fdb\u884c\u9ad8\u7ea7\u5e94\u7528\u7a0b\u5e8f\u548c\u81ea\u5b9a\u4e49\u5de5\u5177\u5f00\u53d1\u3002</li> </ul> <p>\u8981\u8be6\u7ec6\u4e86\u89e3 LeanExplore \u5305\u4e2d\u7684\u6bcf\u4e2a\u51fd\u6570\u3001\u7c7b\u548c\u6a21\u5757\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\uff0c\u8bf7\u6d4f\u89c8\u4fa7\u8fb9\u680f\u4e2d\u63d0\u4f9b\u7684 API \u53c2\u8003 \u90e8\u5206\u3002</p>"},{"location":"zh/cli/search/","title":"\u4f7f\u7528 LeanExplore \u6267\u884c\u641c\u7d22","text":"<p>LeanExplore \u63d0\u4f9b\u7075\u6d3b\u800c\u5f3a\u5927\u7684\u65b9\u5f0f\u6765\u641c\u7d22 Lean \u6570\u5b66\u8bed\u53e5\u548c\u5b9a\u4e49\uff0c\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42\u548c\u5de5\u4f5c\u6d41\u7a0b\u3002\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u8fdc\u7a0b LeanExplore API \u8fdb\u884c\u5373\u65f6\u8bbf\u95ee\u6216\u672c\u5730\u6570\u636e\u8d44\u6e90\u8fdb\u884c\u79bb\u7ebf\u529f\u80fd\u6765\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u6267\u884c\u641c\u7d22\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5141\u8bb8\u60a8\u5c06 LeanExplore \u7684\u641c\u7d22\u5f15\u64ce\u96c6\u6210\u5230\u60a8\u7684\u81ea\u5b9a\u4e49 Python \u5de5\u5177\u6216\u5206\u6790\u4e2d\u3002</p>"},{"location":"zh/cli/search/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u901a\u8fc7\u8fdc\u7a0b API \u641c\u7d22</li> <li>\u5148\u51b3\u6761\u4ef6</li> <li>\u7f16\u7a0b\u8bbf\u95ee\uff08\u5f02\u6b65\uff09</li> <li>CLI \u5185\u90e8\u4f7f\u7528</li> <li>\u4f7f\u7528\u672c\u5730\u6570\u636e\u641c\u7d22</li> <li>\u5148\u51b3\u6761\u4ef6</li> <li>\u7f16\u7a0b\u8bbf\u95ee</li> <li>CLI \u5185\u90e8\u4f7f\u7528</li> </ul>"},{"location":"zh/cli/search/#api","title":"\u901a\u8fc7\u8fdc\u7a0b API \u641c\u7d22","text":"<p>\u4f7f\u7528\u8fdc\u7a0b API \u662f\u5feb\u901f\u5165\u95e8\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5c06\u6570\u636e\u6258\u7ba1\u548c\u641c\u7d22\u8ba1\u7b97\u5378\u8f7d\u5230 LeanExplore \u670d\u52a1\u5668\u3002\u60a8\u53ea\u9700\u8981\u4e00\u4e2a API \u5bc6\u94a5\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u3002API \u5ba2\u6237\u7aef\u4e2d\u7684\u65b9\u6cd5\u662f\u5f02\u6b65\u7684\u3002\u5bf9\u4e8e\u5728 IPython \u6216 Jupyter \u4e2d\u4f7f\u7528\uff0c\u901a\u5e38\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9876\u7ea7 <code>await</code>\u3002</p>"},{"location":"zh/cli/search/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<ul> <li>\u5b89\u88c5\u4e86 <code>lean_explore</code> Python \u5305\uff08<code>pip install lean-explore</code>\uff09\u3002\u8fd9\u5305\u62ec API \u5ba2\u6237\u7aef\u6240\u9700\u7684 <code>httpx</code> \u5e93\u3002</li> <li>\u60a8\u7684\u4e2a\u4eba LeanExplore API \u5bc6\u94a5\u3002\u60a8\u53ef\u4ee5\u4ece leanexplore.com/api-keys \u83b7\u53d6\u4e00\u4e2a\u3002</li> <li>\u6b64 API \u5bc6\u94a5\u5e94\u4f7f\u7528 CLI \u914d\u7f6e\u4ee5\u4fbf\u4e8e\u52a0\u8f7d\uff1a   <pre><code>leanexplore configure api-key YOUR_API_KEY_HERE\n</code></pre>   \u6216\u8005\uff0c\u8bbe\u7f6e <code>LEANEXPLORE_API_KEY</code> \u73af\u5883\u53d8\u91cf\u3002</li> </ul>"},{"location":"zh/cli/search/#_3","title":"\u7f16\u7a0b\u8bbf\u95ee\uff08\u5f02\u6b65\uff09","text":""},{"location":"zh/cli/search/#1-api","title":"1. \u521d\u59cb\u5316 API \u5ba2\u6237\u7aef","text":"<p>\u5bfc\u5165\u5fc5\u8981\u7684\u6a21\u5757\u5e76\u521d\u59cb\u5316\u5ba2\u6237\u7aef\u3002\u8fd9\u5047\u8bbe\u60a8\u7684 API \u5bc6\u94a5\u5df2\u914d\u7f6e\u3002</p> <pre><code>import asyncio\nfrom lean_explore.api.client import Client\nfrom lean_explore.cli import config_utils\n\n# \u52a0\u8f7d API \u5bc6\u94a5\uff08\u786e\u4fdd\u901a\u8fc7 CLI \u6216 ENV \u53d8\u91cf\u914d\u7f6e\uff09\napi_key = config_utils.load_api_key() \nclient = Client(api_key=api_key)\nprint(\"API \u5ba2\u6237\u7aef\u5df2\u521d\u59cb\u5316\u3002\")\n</code></pre>"},{"location":"zh/cli/search/#2","title":"2. \u6267\u884c\u641c\u7d22","text":"<p>\u4f7f\u7528 <code>client.search()</code> \u65b9\u6cd5\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a <code>APISearchResponse</code> \u5bf9\u8c61\u3002\uff08\u9700\u8981\u6b65\u9aa4 1 \u4e2d\u7684 <code>client</code>\uff09\u3002</p> <pre><code># \u5b9a\u4e49\u67e5\u8be2\u548c\u663e\u793a\u7ed3\u679c\u7684\u9650\u5236\nquery_str_api = \"\u5fae\u79ef\u5206\u57fa\u672c\u5b9a\u7406\"\ndisplay_limit_api = 3\n\n# \u6267\u884c\u641c\u7d22\uff08\u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528 'await'\uff0c\u4f8b\u5982 IPython\u3001Jupyter \u6216\u5f02\u6b65\u811a\u672c\uff09\nsearch_response_api = await client.search(query=query_str_api)\n\nprint(f\"\\n\u4e3a '{query_str_api}' \u627e\u5230 {search_response_api.count} \u4e2a API \u7ed3\u679c\uff1a\")\nfor item_api in search_response_api.results[:display_limit_api]:\n    name_api = (item_api.primary_declaration.lean_name\n                if item_api.primary_declaration else \"N/A\")\n    print(f\"  ID: {item_api.id}, \u540d\u79f0: {name_api}\")\n    print(f\"    \u6587\u4ef6: {item_api.source_file}:{item_api.range_start_line}\")\n\n# \u793a\u4f8b\uff1a\u83b7\u53d6\u7b2c\u4e00\u4e2a\u7ed3\u679c\u7684 ID\uff0c\u5047\u8bbe\u5b58\u5728\u7ed3\u679c\napi_first_result_id = search_response_api.results[0].id\nprint(f\"\u7b2c\u4e00\u4e2a API \u7ed3\u679c\u7684 ID: {api_first_result_id}\")\n</code></pre>"},{"location":"zh/cli/search/#3-id","title":"3. \u901a\u8fc7 ID \u68c0\u7d22\u8bed\u53e5\u7ec4","text":"<p>\u4f7f\u7528 <code>client.get_by_id()</code>\u3002\uff08\u9700\u8981\u524d\u9762\u6b65\u9aa4\u4e2d\u7684 <code>client</code> \u548c <code>api_first_result_id</code>\uff09\u3002</p> <pre><code># \u4f7f\u7528\u4ece\u641c\u7d22\u7ed3\u679c\u83b7\u5f97\u7684 ID\nitem_details_api = await client.get_by_id(group_id=api_first_result_id)\n\nname_details_api = (item_details_api.primary_declaration.lean_name\n                    if item_details_api.primary_declaration else \"N/A\")\nprint(f\"\\nAPI \u8bed\u53e5\u7ec4 ID {item_details_api.id} \u7684\u8be6\u7ec6\u4fe1\u606f: \u540d\u79f0: {name_details_api}\")\n# print(f\"  \u8bed\u53e5: {item_details_api.statement_text}\")\n</code></pre>"},{"location":"zh/cli/search/#4","title":"4. \u83b7\u53d6\u4f9d\u8d56\u5173\u7cfb","text":"<p>\u4f7f\u7528 <code>client.get_dependencies()</code>\u3002\uff08\u9700\u8981 <code>client</code> \u548c <code>api_first_result_id</code>\uff09\u3002</p> <pre><code># \u4f7f\u7528\u4ece\u641c\u7d22\u7ed3\u679c\u83b7\u5f97\u7684 ID\ndeps_response_api = await client.get_dependencies(group_id=api_first_result_id)\n\nprint(f\"\\n\u7ec4 ID {deps_response_api.source_group_id} \u7684 API \u4f9d\u8d56\u5173\u7cfb\\n  \uff08\u627e\u5230 {deps_response_api.count} \u4e2a\uff09\uff1a\")\nfor citation_api in deps_response_api.citations:\n    name_deps_api = (citation_api.primary_declaration.lean_name\n                     if citation_api.primary_declaration else \"N/A\")\n    print(f\"  - \u4f9d\u8d56 ID: {citation_api.id}, \u540d\u79f0: {name_deps_api}\")\n</code></pre> <p>\u5173\u4e8e\u8fd0\u884c\u5f02\u6b65\u4ee3\u7801\u7684\u6ce8\u610f\u4e8b\u9879\uff1a <code>await</code> \u5173\u952e\u5b57\u7528\u4e8e API \u8c03\u7528\u3002\u5728\u72ec\u7acb\u7684 Python \u811a\u672c\u4e2d\uff0c\u60a8\u901a\u5e38\u4f1a\u5c06\u8fd9\u4e9b\u8c03\u7528\u5305\u88c5\u5728 <code>async def</code> \u51fd\u6570\u4e2d\u5e76\u4f7f\u7528 <code>asyncio.run()</code> \u8fd0\u884c\u5b83\u3002\u5728 IPython 7.0+ \u6216 Jupyter notebook \u7b49\u73af\u5883\u4e2d\uff0c\u901a\u5e38\u76f4\u63a5\u652f\u6301\u9876\u7ea7 <code>await</code>\u3002</p>"},{"location":"zh/cli/search/#cli","title":"CLI \u5185\u90e8\u4f7f\u7528","text":"<p>LeanExplore CLI \u547d\u4ee4\uff0c\u5982 <code>leanexplore search</code>\u3001<code>get</code>\u3001<code>dependencies</code> \u548c <code>leanexplore chat --backend api</code>\uff08\u5982\u679c\u8bbe\u7f6e\u4e86 API \u5bc6\u94a5\uff0c\u8fd9\u662f\u804a\u5929\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff09\u90fd\u5728\u5185\u90e8\u4f7f\u7528\u6b64 <code>lean_explore.api.client.Client</code>\u3002</p>"},{"location":"zh/cli/search/#_4","title":"\u4f7f\u7528\u672c\u5730\u6570\u636e\u641c\u7d22","text":"<p>\u6b64\u6a21\u5f0f\u5141\u8bb8\u60a8\u76f4\u63a5\u5728\u673a\u5668\u4e0a\u4f7f\u7528\u672c\u5730\u6570\u636e\u96c6\u6267\u884c\u641c\u7d22\u3002\u5b83\u5229\u7528 SQLite \u6570\u636e\u5e93\u5b58\u50a8\u7ed3\u6784\u5316\u4fe1\u606f\uff0cFAISS \u5411\u91cf\u7d22\u5f15\u8fdb\u884c\u9ad8\u6548\u7684\u8bed\u4e49\u5339\u914d\uff0c\u4ee5\u53ca\u672c\u5730\u53e5\u5b50\u5d4c\u5165\u6a21\u578b\u6765\u5904\u7406\u60a8\u7684\u67e5\u8be2\u3002\u8fd9\u5bf9\u4e8e\u79bb\u7ebf\u4f7f\u7528\u3001\u81ea\u5b9a\u4e49\u6570\u636e\u5206\u6790\u6216\u5f53\u60a8\u5e0c\u671b\u5b8c\u5168\u63a7\u5236\u6570\u636e\u8d44\u4ea7\u65f6\u662f\u7406\u60f3\u7684\u3002</p>"},{"location":"zh/cli/search/#_5","title":"\u5148\u51b3\u6761\u4ef6","text":"<ul> <li>\u5b89\u88c5\u4e86 <code>lean_explore</code> Python \u5305\u3002</li> <li>\u5fc5\u987b\u4e0b\u8f7d\u5e76\u53ef\u7528\u672c\u5730\u6570\u636e\u5de5\u5177\u94fe\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 CLI \u547d\u4ee4\u6267\u884c\u6b64\u64cd\u4f5c\uff1a   <pre><code>leanexplore data fetch\n</code></pre>   \u8fd9\u786e\u4fdd\u6570\u636e\u5e93\u548c FAISS \u7d22\u5f15\u5b58\u5728\u4e8e\u9884\u671f\u4f4d\u7f6e\uff08\u901a\u5e38\u662f <code>~/.lean_explore/data/toolchains/&lt;version&gt;/</code>\uff09\u3002</li> </ul>"},{"location":"zh/cli/search/#_6","title":"\u7f16\u7a0b\u8bbf\u95ee","text":""},{"location":"zh/cli/search/#1","title":"1. \u521d\u59cb\u5316\u672c\u5730\u670d\u52a1","text":"<p>\u5bfc\u5165\u5e76\u5b9e\u4f8b\u5316 <code>lean_explore.local.service.Service</code> \u7c7b\u3002\u8fd9\u5047\u8bbe\u6570\u636e\u6587\u4ef6\u5df2\u6b63\u786e\u4e0b\u8f7d\u3002</p> <pre><code>from lean_explore.local.service import Service\n\n# \u5047\u8bbe Service() \u6210\u529f\u521d\u59cb\u5316\uff08\u6570\u636e\u6587\u4ef6\u5b58\u5728\uff09\nservice_instance = Service()\nprint(\"\u672c\u5730\u670d\u52a1\u5df2\u6210\u529f\u521d\u59cb\u5316\u3002\")\n</code></pre>"},{"location":"zh/cli/search/#2_1","title":"2. \u6267\u884c\u641c\u7d22","text":"<p>\u4f7f\u7528 <code>service.search()</code> \u65b9\u6cd5\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a <code>APISearchResponse</code> \u5bf9\u8c61\u3002\uff08\u9700\u8981\u6b65\u9aa4 1 \u4e2d\u7684 <code>service_instance</code>\uff09\u3002</p> <pre><code># \u5b9a\u4e49\u67e5\u8be2\u548c\u9650\u5236\nquery_str_local = \"\u73af\u5b9a\u4e49\"\nlimit_for_local = 3\n\nsearch_response_local = service_instance.search(\n    query=query_str_local, \n    limit=limit_for_local\n)\n\nprint(f\"\\n\u4e3a '{query_str_local}' \u627e\u5230 {search_response_local.count} \u4e2a\u672c\u5730\u7ed3\u679c\uff1a\")\nfor item_local in search_response_local.results: # \u5df2\u7531 service.search \u9650\u5236\n    name_local = (item_local.primary_declaration.lean_name\n                  if item_local.primary_declaration else \"N/A\")\n    print(f\"  ID: {item_local.id}, \u540d\u79f0: {name_local}\")\n    print(f\"    \u6587\u4ef6: {item_local.source_file}:{item_local.range_start_line}\")\n\n# \u793a\u4f8b\uff1a\u83b7\u53d6\u7b2c\u4e00\u4e2a\u7ed3\u679c\u7684 ID\uff0c\u5047\u8bbe\u5b58\u5728\u7ed3\u679c\nlocal_first_result_id = search_response_local.results[0].id\nprint(f\"\u7b2c\u4e00\u4e2a\u672c\u5730\u7ed3\u679c\u7684 ID: {local_first_result_id}\")\n</code></pre>"},{"location":"zh/cli/search/#3-id_1","title":"3. \u901a\u8fc7 ID \u68c0\u7d22\u8bed\u53e5\u7ec4","text":"<p>\u4f7f\u7528 <code>service.get_by_id()</code>\u3002\uff08\u9700\u8981 <code>service_instance</code> \u548c <code>local_first_result_id</code>\uff09\u3002</p> <pre><code># \u4f7f\u7528\u4ece\u672c\u5730\u641c\u7d22\u7ed3\u679c\u83b7\u5f97\u7684 ID\nitem_details_local = service_instance.get_by_id(\n    group_id=local_first_result_id\n)\n\nname_details_local = (item_details_local.primary_declaration.lean_name\n                      if item_details_local.primary_declaration else \"N/A\")\nprint(f\"\\n\u672c\u5730\u8bed\u53e5\u7ec4 ID {item_details_local.id} \u7684\u8be6\u7ec6\u4fe1\u606f: \u540d\u79f0: {name_details_local}\")\n# print(f\"  \u8bed\u53e5: {item_details_local.statement_text}\")\n</code></pre>"},{"location":"zh/cli/search/#4_1","title":"4. \u83b7\u53d6\u4f9d\u8d56\u5173\u7cfb","text":"<p>\u4f7f\u7528 <code>service.get_dependencies()</code>\u3002\uff08\u9700\u8981 <code>service_instance</code> \u548c <code>local_first_result_id</code>\uff09\u3002</p> <pre><code># \u4f7f\u7528\u4ece\u672c\u5730\u641c\u7d22\u7ed3\u679c\u83b7\u5f97\u7684 ID\ndeps_response_local = service_instance.get_dependencies(\n    group_id=local_first_result_id\n)\n\nprint(f\"\\n\u7ec4 ID {deps_response_local.source_group_id} \u7684\u672c\u5730\u4f9d\u8d56\u5173\u7cfb\\n  \uff08\u627e\u5230 {deps_response_local.count} \u4e2a\uff09\uff1a\")\nfor citation_local in deps_response_local.citations:\n    name_deps_local = (citation_local.primary_declaration.lean_name\n                       if citation_local.primary_declaration else \"N/A\")\n    print(f\"  - \u4f9d\u8d56 ID: {citation_local.id}, \u540d\u79f0: {name_deps_local}\")\n</code></pre>"},{"location":"zh/cli/search/#cli_1","title":"CLI \u5185\u90e8\u4f7f\u7528","text":"<p>LeanExplore CLI \u547d\u4ee4 <code>leanexplore chat --backend local</code> \u548c <code>leanexplore mcp serve --backend local</code> \u4f7f\u7528\u6b64 <code>lean_explore.local.service.Service</code> \u7c7b\u4e0e\u60a8\u7684\u672c\u5730\u6570\u636e\u5de5\u5177\u94fe\u4ea4\u4e92\u3002</p>"},{"location":"zh/cli/usage/","title":"\u4f7f\u7528 LeanExplore CLI","text":"<p>LeanExplore \u547d\u4ee4\u884c\u754c\u9762 (CLI)\uff0c\u4f7f\u7528 <code>leanexplore</code> \u547d\u4ee4\u8c03\u7528\uff0c\u662f\u60a8\u4e0e LeanExplore \u751f\u6001\u7cfb\u7edf\u4ea4\u4e92\u7684\u4e3b\u8981\u5de5\u5177\u3002\u5b83\u4f7f\u60a8\u80fd\u591f\u914d\u7f6e\u8bbe\u7f6e\u3001\u7ba1\u7406\u672c\u5730\u6570\u636e\u3001\u76f4\u63a5\u641c\u7d22 LeanExplore API\u3001\u4f7f\u7528 AI \u52a9\u624b\u63a2\u7d22\u4ee3\u7801\uff0c\u4ee5\u53ca\u63a7\u5236\u6a21\u578b\u4e0a\u4e0b\u6587\u534f\u8bae (MCP) \u670d\u52a1\u5668\u4ee5\u8fdb\u884c\u66f4\u9ad8\u7ea7\u7684\u96c6\u6210\u3002</p>"},{"location":"zh/cli/usage/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u4f7f\u7528 LeanExplore CLI</li> <li>\u76ee\u5f55</li> <li>\u7406\u89e3 CLI \u57fa\u7840</li> <li>\u5165\u95e8\uff1a\u521d\u59cb\u8bbe\u7f6e<ul> <li>\u914d\u7f6e\u60a8\u7684 API \u5bc6\u94a5</li> <li>\uff08\u53ef\u9009\uff09\u51c6\u5907\u672c\u5730\u6570\u636e\u63a2\u7d22</li> </ul> </li> <li>\u67e5\u627e\u548c\u68c0\u67e5 Lean \u4ee3\u7801\uff08\u901a\u8fc7 API\uff09<ul> <li>\u641c\u7d22 Lean \u8bed\u53e5</li> <li>\u67e5\u770b\u8be6\u7ec6\u4fe1\u606f</li> <li>\u63a2\u7d22\u4ee3\u7801\u4f9d\u8d56\u5173\u7cfb</li> </ul> </li> <li>\u4f7f\u7528 AI \u804a\u5929\u52a9\u624b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u63a2\u7d22<ul> <li>\u542f\u52a8\u804a\u5929\u4f1a\u8bdd</li> <li>\u7406\u89e3\u5173\u952e\u804a\u5929\u9009\u9879</li> </ul> </li> <li>\u901a\u8fc7 MCP \u670d\u52a1\u5668\u4e0e AI \u4ee3\u7406\u96c6\u6210<ul> <li>\u8fd0\u884c\u670d\u52a1\u5668</li> <li>\u5173\u952e\u670d\u52a1\u5668\u9009\u9879</li> </ul> </li> </ul>"},{"location":"zh/cli/usage/#cli","title":"\u7406\u89e3 CLI \u57fa\u7840","text":"<p>\u5927\u591a\u6570 CLI \u547d\u4ee4\u9075\u5faa\u7ed3\u6784\uff1a<code>leanexplore [OPTIONS] COMMAND [ARGS]...</code>\u3002\u8981\u5728\u4efb\u4f55\u65f6\u5019\u83b7\u5f97\u5e2e\u52a9\uff0c\u65e0\u8bba\u662f\u4e3b\u547d\u4ee4\u8fd8\u662f\u7279\u5b9a\u5b50\u547d\u4ee4\uff0c\u53ea\u9700\u9644\u52a0 <code>--help</code>\uff1a</p> <pre><code>leanexplore --help\n</code></pre> <pre><code>leanexplore configure --help\n</code></pre> <pre><code>leanexplore data fetch --help\n</code></pre>"},{"location":"zh/cli/usage/#_2","title":"\u5165\u95e8\uff1a\u521d\u59cb\u8bbe\u7f6e","text":"<p>\u5728\u6df1\u5165\u4e86\u89e3 LeanExplore \u7684\u6240\u6709\u529f\u80fd\u4e4b\u524d\uff0c\u4e00\u4e9b\u521d\u59cb\u8bbe\u7f6e\u6b65\u9aa4\u53ef\u4ee5\u786e\u4fdd\u4e00\u5207\u987a\u5229\u8fd0\u884c\uff0c\u7279\u522b\u662f\u5728\u4e0e\u5728\u7ebf\u670d\u52a1\u6216 AI \u52a9\u624b\u4ea4\u4e92\u65f6\u3002</p>"},{"location":"zh/cli/usage/#api","title":"\u914d\u7f6e\u60a8\u7684 API \u5bc6\u94a5","text":"<p>LeanExplore \u4f7f\u7528 API \u5bc6\u94a5\u6765\u9a8c\u8bc1\u5bf9\u67d0\u4e9b\u670d\u52a1\u7684\u8bbf\u95ee\u3002\u4e00\u65e6\u8bbe\u7f6e\uff0c\u8fd9\u4e9b\u5bc6\u94a5\u5c06\u5b89\u5168\u5730\u5b58\u50a8\u5728\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002</p> <p>LeanExplore API \u5bc6\u94a5\uff1a \u6b64\u5bc6\u94a5\u5bf9\u4e8e\u4e0e\u8fdc\u7a0b LeanExplore API \u901a\u4fe1\u7684\u529f\u80fd\u81f3\u5173\u91cd\u8981\uff0c\u4f8b\u5982\u76f4\u63a5\u641c\u7d22\uff08<code>search</code>\u3001<code>get</code>\u3001<code>dependencies</code> \u547d\u4ee4\uff09\u548c\u4f7f\u7528\u5177\u6709\u9ed8\u8ba4 API \u540e\u7aef\u7684 AI \u804a\u5929\u3002</p> <p>\u60a8\u53ef\u4ee5\u4ece https://www.leanexplore.com/api-keys \u83b7\u53d6\u60a8\u7684 LeanExplore API \u5bc6\u94a5\u3002\u4e00\u65e6\u60a8\u6709\u4e86\u5b83\uff0c\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u914d\u7f6e\u5b83\uff1a</p> <pre><code>leanexplore configure api-key\n</code></pre> <p>\u7cfb\u7edf\u5c06\u63d0\u793a\u60a8\u8f93\u5165\u5bc6\u94a5\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u6b21\u6027\u8bbe\u7f6e\u3002</p> <p>OpenAI API \u5bc6\u94a5\uff1a \u5982\u679c\u60a8\u8ba1\u5212\u4f7f\u7528 AI \u9a71\u52a8\u7684\u804a\u5929\u529f\u80fd\uff08<code>leanexplore chat</code>\uff09\uff0c\u60a8\u8fd8\u9700\u8981\u4e00\u4e2a OpenAI API \u5bc6\u94a5\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u914d\u7f6e\u5b83\uff1a</p> <pre><code>leanexplore configure openai-key\n</code></pre> <p>\u6309\u7167\u63d0\u793a\u8f93\u5165\u60a8\u7684 OpenAI \u5bc6\u94a5\u3002</p>"},{"location":"zh/cli/usage/#_3","title":"\uff08\u53ef\u9009\uff09\u51c6\u5907\u672c\u5730\u6570\u636e\u63a2\u7d22","text":"<p>\u5bf9\u4e8e\u559c\u6b22\u79bb\u7ebf\u5de5\u4f5c\u6216\u5bf9\u6570\u636e\u96c6\u6709\u76f4\u63a5\u63a7\u5236\u7684\u7528\u6237\uff0cLeanExplore \u652f\u6301\u672c\u5730\u6570\u636e\u5de5\u5177\u94fe\u3002\u8fd9\u6d89\u53ca\u5c06\u5fc5\u8981\u7684\u6570\u636e\u8d44\u4ea7\u4e0b\u8f7d\u5230\u60a8\u7684\u673a\u5668\u4e0a\u3002</p> <p>\u8981\u4e0b\u8f7d\u548c\u8bbe\u7f6e\u4e3b\u8981\u672c\u5730\u6570\u636e\u5de5\u5177\u94fe\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4\uff1a</p> <pre><code>leanexplore data fetch\n</code></pre> <p>\u6b64\u547d\u4ee4\u83b7\u53d6 SQLite \u6570\u636e\u5e93\uff08\u5305\u542b Lean \u9879\u76ee\u4fe1\u606f\uff09\u3001\u7528\u4e8e\u8bed\u4e49\u641c\u7d22\u7684 FAISS \u641c\u7d22\u7d22\u5f15\u4ee5\u53ca\u76f8\u5173\u7684\u6620\u5c04\u6587\u4ef6\u3002\u8fd9\u4e9b\u5b89\u88c5\u5230\u672c\u5730\u76ee\u5f55\u4e2d\uff0c\u901a\u5e38\u5728 <code>~/.lean_explore/data/toolchains/</code> \u5185\u3002</p> <p>\u6ce8\u610f\uff1a \u6570\u636e\u5de5\u5177\u94fe\u53ef\u80fd\u6709\u51e0\u4e2a GB\u3002\u6839\u636e\u60a8\u7684\u4e92\u8054\u7f51\u8fde\u63a5\uff0c\u521d\u59cb\u4e0b\u8f7d\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u3002\u6b64\u6b65\u9aa4\u662f\u4f7f\u7528\u4f9d\u8d56\u672c\u5730\u540e\u7aef\u7684\u529f\u80fd\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u4f8b\u5982 <code>leanexplore chat --backend local</code> \u6216 <code>leanexplore mcp serve --backend local</code>\u3002</p>"},{"location":"zh/cli/usage/#lean-api","title":"\u67e5\u627e\u548c\u68c0\u67e5 Lean \u4ee3\u7801\uff08\u901a\u8fc7 API\uff09","text":"<p>\u4e00\u65e6\u914d\u7f6e\u4e86\u60a8\u7684 LeanExplore API \u5bc6\u94a5\uff0c\u60a8\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u8fdc\u7a0b API \u6765\u67e5\u627e\u548c\u68c0\u67e5 Lean \u8bed\u53e5\u3002\u8fd9\u4e9b\u547d\u4ee4\u63d0\u4f9b\u5bf9 LeanExplore \u7d22\u5f15\u7684\u4e30\u5bcc\u4fe1\u606f\u7684\u5feb\u901f\u8bbf\u95ee\u3002</p>"},{"location":"zh/cli/usage/#lean","title":"\u641c\u7d22 Lean \u8bed\u53e5","text":"<p>\u8981\u57fa\u4e8e\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u641c\u7d22 Lean \u8bed\u53e5\u7ec4\uff0c\u8bf7\u4f7f\u7528 <code>leanexplore search</code> \u547d\u4ee4\uff1a</p> <pre><code>leanexplore search \"your query string here\" [OPTIONS]\n</code></pre> <p>\u4f8b\u5982\uff0c\u8981\u67e5\u627e\u4e0e\"\u5fae\u79ef\u5206\u57fa\u672c\u5b9a\u7406\"\u76f8\u5173\u7684\u8bed\u53e5\uff0c\u9650\u5236\u7ed3\u679c\uff0c\u5e76\u6309\"Mathlib\"\u5305\u8fc7\u6ee4\uff1a</p> <pre><code>leanexplore search \"fundamental theorem of calculus\" --package Mathlib --limit 3\n</code></pre> <p>\u641c\u7d22\u7684\u5173\u952e\u9009\u9879\uff1a</p> <ul> <li><code>QUERY_STRING</code>\uff1a\u60a8\u7684\u641c\u7d22\u8bcd\u3002\u5982\u679c\u5305\u542b\u7a7a\u683c\uff0c\u8bf7\u7528\u5f15\u53f7\u62ec\u8d77\u6765\u3002</li> <li><code>--package TEXT</code>\uff08\u6216 <code>-p TEXT</code>\uff09\uff1a\u6309\u7279\u5b9a\u5305\u540d\u8fc7\u6ee4\u7ed3\u679c\uff08\u4f8b\u5982\uff0c<code>Mathlib</code>\u3001<code>Std</code>\uff09\u3002\u6b64\u9009\u9879\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\u4ee5\u5305\u542b\u591a\u4e2a\u5305\u3002</li> <li><code>--limit INTEGER</code>\uff08\u6216 <code>-n INTEGER</code>\uff09\uff1a\u6307\u5b9a\u8981\u663e\u793a\u7684\u6700\u5927\u641c\u7d22\u7ed3\u679c\u6570\u3002\u9ed8\u8ba4\u4e3a 5\u3002</li> </ul> <p>\u8be5\u547d\u4ee4\u5c06\u663e\u793a\u5339\u914d\u7684\u8bed\u53e5\u7ec4\u5217\u8868\uff0c\u5305\u62ec\u5b83\u4eec\u7684 ID\u3001Lean \u540d\u79f0\u3001\u6e90\u6587\u4ef6\u4f4d\u7f6e\u4ee5\u53ca\u76f8\u5173\u7684\u4ee3\u7801\u6216\u6587\u6863\u5b57\u7b26\u4e32\u7247\u6bb5\u3002</p>"},{"location":"zh/cli/usage/#_4","title":"\u67e5\u770b\u8be6\u7ec6\u4fe1\u606f","text":"<p>\u5982\u679c\u60a8\u6709\u7279\u5b9a\u7684\u8bed\u53e5\u7ec4 ID\uff08\u901a\u5e38\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u83b7\u5f97\uff09\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>leanexplore get</code> \u68c0\u7d22\u5176\u5b8c\u6574\u8be6\u7ec6\u4fe1\u606f\uff1a</p> <pre><code>leanexplore get &lt;GROUP_ID&gt;\n</code></pre> <p>\u4f8b\u5982\uff1a</p> <pre><code>leanexplore get 12345\n</code></pre> <p>\u8fd9\u663e\u793a\u4e86\u7ec4\u7684\u5168\u9762\u4fe1\u606f\uff0c\u4f8b\u5982\u5176\u5b8c\u6574\u7684\u8bed\u53e5\u6587\u672c\u3001\u6587\u6863\u5b57\u7b26\u4e32\u548c\u4efb\u4f55\u975e\u6b63\u5f0f\u63cf\u8ff0\uff0c\u901a\u5e38\u4ee5\u6613\u4e8e\u9605\u8bfb\u7684\u683c\u5f0f\u5316\u9762\u677f\u5448\u73b0\u3002</p>"},{"location":"zh/cli/usage/#_5","title":"\u63a2\u7d22\u4ee3\u7801\u4f9d\u8d56\u5173\u7cfb","text":"<p>\u8981\u4e86\u89e3\u8bed\u53e5\u7ec4\u5982\u4f55\u8fde\u63a5\u5230\u5176\u4ed6\u8bed\u53e5\u7ec4\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>leanexplore dependencies</code> \u83b7\u53d6\u5176\u76f4\u63a5\u4f9d\u8d56\u5173\u7cfb\uff08\u5b83\u5f15\u7528\u7684\u9879\u76ee\uff09\uff1a</p> <pre><code>leanexplore dependencies &lt;GROUP_ID&gt;\n</code></pre> <p>\u793a\u4f8b\uff1a</p> <pre><code>leanexplore dependencies 12345\n</code></pre> <p>\u6b64\u547d\u4ee4\u5217\u51fa\u6307\u5b9a\u7ec4\u4f9d\u8d56\u7684\u8bed\u53e5\u7ec4\uff0c\u901a\u5e38\u4ee5\u8868\u683c\u683c\u5f0f\u663e\u793a\u6bcf\u4e2a\u4f9d\u8d56\u9879\u7684 ID\u3001Lean \u540d\u79f0\u548c\u6e90\u4f4d\u7f6e\u3002</p>"},{"location":"zh/cli/usage/#ai","title":"\u4f7f\u7528 AI \u804a\u5929\u52a9\u624b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u63a2\u7d22","text":"<p>LeanExplore \u63d0\u4f9b AI \u9a71\u52a8\u7684\u804a\u5929\u52a9\u624b\uff08<code>leanexplore chat</code>\uff09\uff0c\u4ee5\u5bf9\u8bdd\u65b9\u5f0f\u641c\u7d22\u3001\u7406\u89e3\u548c\u63a2\u7d22 Lean \u4ee3\u7801\u3002</p> <p>\u5148\u51b3\u6761\u4ef6\uff1a</p> <ul> <li>\u5fc5\u987b\u914d\u7f6e\u60a8\u7684 OpenAI API \u5bc6\u94a5\uff08\u4f7f\u7528 <code>leanexplore configure openai-key</code>\uff09\u3002</li> <li>\u5bf9\u4e8e\u9ed8\u8ba4 API \u540e\u7aef\uff1a\u5fc5\u987b\u914d\u7f6e\u60a8\u7684 LeanExplore API \u5bc6\u94a5\u3002</li> <li>\u5bf9\u4e8e\u672c\u5730\u540e\u7aef\uff1a\u5fc5\u987b\u83b7\u53d6\u60a8\u7684\u672c\u5730\u6570\u636e\u5de5\u5177\u94fe\uff08\u4f7f\u7528 <code>leanexplore data fetch</code>\uff09\u3002</li> </ul>"},{"location":"zh/cli/usage/#_6","title":"\u542f\u52a8\u804a\u5929\u4f1a\u8bdd","text":"<p>\u8981\u4f7f\u7528\u9ed8\u8ba4 API \u540e\u7aef\u542f\u52a8\u804a\u5929\u4f1a\u8bdd\uff08\u63a8\u8350\u7ed9\u5927\u591a\u6570\u7528\u6237\uff0c\u63d0\u4f9b\u5bf9\u6700\u65b0\u6570\u636e\u7684\u8bbf\u95ee\uff09\uff1a</p> <pre><code>leanexplore chat\n</code></pre> <p>\u5982\u679c\u60a8\u5df2\u8bbe\u7f6e\u672c\u5730\u6570\u636e\u5e76\u5e0c\u671b\u4f7f\u7528\u5b83\uff08\u4f8b\u5982\uff0c\u7528\u4e8e\u79bb\u7ebf\u8bbf\u95ee\uff09\uff1a</p> <pre><code>leanexplore chat --backend local\n</code></pre>"},{"location":"zh/cli/usage/#_7","title":"\u7406\u89e3\u5173\u952e\u804a\u5929\u9009\u9879","text":"<ul> <li><code>--backend {api|local}</code>\uff08\u522b\u540d\uff1a<code>-lb</code>\uff09\uff1a\u6307\u5b9a AI \u5de5\u5177\u7684\u6570\u636e\u6e90\u3002</li> <li><code>api</code>\uff08\u9ed8\u8ba4\uff09\uff1a\u4ee3\u7406\u67e5\u8be2\u8fdc\u7a0b LeanExplore API\u3002</li> <li><code>local</code>\uff1a\u4ee3\u7406\u4f7f\u7528\u60a8\u4e0b\u8f7d\u7684\u672c\u5730\u6570\u636e\u3002</li> <li><code>--lean-api-key TEXT</code>\uff1a\uff08\u53ef\u9009\uff09\u5982\u679c\u4f7f\u7528 API \u540e\u7aef\uff0c\u60a8\u53ef\u4ee5\u4e3a\u5f53\u524d\u4f1a\u8bdd\u63d0\u4f9b LeanExplore API \u5bc6\u94a5\uff0c\u8986\u76d6\u4efb\u4f55\u914d\u7f6e\u7684\u5bc6\u94a5\u3002</li> <li><code>--debug</code>\uff1a\u4e3a\u804a\u5929\u5ba2\u6237\u7aef\u548c\u5b83\u7ba1\u7406\u7684\u5e95\u5c42 MCP \u670d\u52a1\u5668\u542f\u7528\u8be6\u7ec6\u7684\u8c03\u8bd5\u65e5\u5fd7\u8bb0\u5f55\u3002\u8fd9\u5bf9\u6545\u969c\u6392\u9664\u5f88\u6709\u7528\u3002</li> </ul> <p>\u5728\u804a\u5929\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8981\u6c42\u52a9\u624b\u6267\u884c\u8bf8\u5982\"\u5728 Mathlib \u4e2d\u67e5\u627e'monoid'\u7684\u5b9a\u4e49\"\u6216\"\u663e\u793a <code>Nat.add</code> \u7684\u4f9d\u8d56\u5173\u7cfb\"\u7b49\u4efb\u52a1\u3002</p>"},{"location":"zh/cli/usage/#mcp-ai","title":"\u901a\u8fc7 MCP \u670d\u52a1\u5668\u4e0e AI \u4ee3\u7406\u96c6\u6210","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u529f\u80fd\uff0c\u9002\u7528\u4e8e\u65e8\u5728\u5c06 LeanExplore \u7684\u641c\u7d22\u548c\u68c0\u7d22\u529f\u80fd\u4f5c\u4e3a\u5de5\u5177\u96c6\u6210\u5230\u4ed6\u4eec\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49 AI \u4ee3\u7406\u5e94\u7528\u7a0b\u5e8f\u6216\u5176\u4ed6\u7f16\u7a0b\u8bbe\u7f6e\u4e2d\u7684\u5f00\u53d1\u4eba\u5458\u3002</p> <p><code>leanexplore mcp serve</code> \u547d\u4ee4\u542f\u52a8 LeanExplore \u6a21\u578b\u4e0a\u4e0b\u6587\u534f\u8bae (MCP) \u670d\u52a1\u5668\u3002\u6b64\u670d\u52a1\u5668\u901a\u8fc7\u6807\u51c6\u8f93\u5165/\u8f93\u51fa (stdio) \u4f7f\u7528 JSON-RPC 2.0 \u8fdb\u884c\u901a\u4fe1\uff0c\u5e76\u5c06 LeanExplore \u7684\u529f\u80fd\u516c\u5f00\u4e3a\u517c\u5bb9 MCP \u7684\u4ee3\u7406\u5ba2\u6237\u7aef\u53ef\u4ee5\u8c03\u7528\u7684\"\u5de5\u5177\"\u3002</p>"},{"location":"zh/cli/usage/#_8","title":"\u8fd0\u884c\u670d\u52a1\u5668","text":"<p>\u8981\u4f7f\u7528\u8fdc\u7a0b API \u540e\u7aef\u63d0\u4f9b\u5de5\u5177\uff08\u786e\u4fdd\u914d\u7f6e\u4e86 LeanExplore API \u5bc6\u94a5\u6216\u4f7f\u7528 <code>--api-key</code> \u63d0\u4f9b\uff09\uff1a</p> <pre><code>leanexplore mcp serve --backend api\n</code></pre> <p>\u8981\u4f7f\u7528\u60a8\u7684\u672c\u5730\u6570\u636e\u540e\u7aef\u63d0\u4f9b\u5de5\u5177\uff08\u786e\u4fdd\u5df2\u83b7\u53d6\u672c\u5730\u6570\u636e\uff09\uff1a</p> <pre><code>leanexplore mcp serve --backend local\n</code></pre>"},{"location":"zh/cli/usage/#_9","title":"\u5173\u952e\u670d\u52a1\u5668\u9009\u9879","text":"<ul> <li><code>--backend {api|local}</code>\uff08\u522b\u540d\uff1a<code>-b</code>\uff09\uff1a\u786e\u5b9a\u670d\u52a1\u5668\u7684\u5de5\u5177\u662f\u5426\u5c06\u4f7f\u7528\u8fdc\u7a0b API \u6216\u672c\u5730\u6570\u636e\u3002\u9ed8\u8ba4\u4e3a <code>api</code>\u3002</li> <li><code>--api-key TEXT</code>\uff1a\uff08\u5982\u679c <code>--backend api</code> \u4e14\u672a\u914d\u7f6e\u5bc6\u94a5\u5219\u5fc5\u9700\uff09\u76f4\u63a5\u4e3a\u670d\u52a1\u5668\u63d0\u4f9b\u8981\u4f7f\u7528\u7684 LeanExplore API \u5bc6\u94a5\u3002</li> </ul> <p>\u6ce8\u610f\uff1a <code>leanexplore chat</code> \u547d\u4ee4\u5728\u5185\u90e8\u7ba1\u7406\u6b64 MCP \u670d\u52a1\u5668\u7684\u5b9e\u4f8b\u3002\u76f4\u63a5\u8fd0\u884c <code>leanexplore mcp serve</code> \u901a\u5e38\u7528\u4e8e\u8fde\u63a5\u4e0d\u540c\u7684 MCP \u5ba2\u6237\u7aef\u6216\u4ee3\u7406\u6846\u67b6\u7684\u573a\u666f\u3002</p> <p>\u901a\u8fc7\u719f\u6089\u8fd9\u4e9b\u547d\u4ee4\u548c\u5de5\u4f5c\u6d41\u7a0b\uff0c\u60a8\u53ef\u4ee5\u6709\u6548\u5730\u5229\u7528 LeanExplore CLI \u8fdb\u884c Lean 4 \u4e2d\u7684\u6570\u5b66\u63a2\u7d22\u548c\u5f00\u53d1\u3002</p>"},{"location":"zh/getting-started/quickstart/","title":"\u5feb\u901f\u5165\u95e8\u6307\u5357","text":"<p>\u6b22\u8fce\u6765\u5230 LeanExplore \u5feb\u901f\u5165\u95e8\u6307\u5357\uff01\u672c\u9875\u9762\u5c06\u5f15\u5bfc\u60a8\u5b8c\u6210\u4f7f\u7528 LeanExplore \u5f3a\u5927\u7684\u8fdc\u7a0b API \u548c\u547d\u4ee4\u884c\u754c\u9762 (CLI) \u542f\u52a8\u548c\u8fd0\u884c\u7684\u57fa\u672c\u7b2c\u4e00\u6b65\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u5e2e\u52a9\u60a8\u5feb\u901f\u6267\u884c\u7b2c\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u64cd\u4f5c\u3002</p>"},{"location":"zh/getting-started/quickstart/#_2","title":"\u5148\u51b3\u6761\u4ef6\uff1a\u5b89\u88c5","text":"<p>\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5b89\u88c5 LeanExplore\u3002\u5982\u679c\u6ca1\u6709\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 pip \u5b89\u88c5\u5b83\uff1a</p> <pre><code>pip install lean-explore\n</code></pre> <p>\u672c\u6307\u5357\u4e13\u6ce8\u4e8e\u4f7f\u7528 LeanExplore API\uff0c\u8fd9\u662f\u8bb8\u591a\u547d\u4ee4\u7684\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u4e00\u65e6\u914d\u7f6e\u4e86 API \u5bc6\u94a5\uff0c\u5c31\u63d0\u4f9b\u4e86\u8bbf\u95ee\u641c\u7d22\u548c AI \u529f\u80fd\u7684\u96f6\u8bbe\u7f6e\u65b9\u5f0f\u3002</p>"},{"location":"zh/getting-started/quickstart/#1-leanexplore-api","title":"\u6b65\u9aa4 1\uff1a\u83b7\u53d6\u60a8\u7684 LeanExplore API \u5bc6\u94a5","text":"<p>\u8981\u4e0e LeanExplore API \u4ea4\u4e92\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u4e2a\u4eba API \u5bc6\u94a5\u3002\u6b64\u5bc6\u94a5\u9a8c\u8bc1\u60a8\u5bf9\u6211\u4eec\u670d\u52a1\u5668\u7684\u8bf7\u6c42\u3002\u5982\u679c\u60a8\u6ca1\u6709\uff0c\u8bf7\u8bbf\u95ee https://www.leanexplore.com/api-keys \u6ce8\u518c\u6216\u767b\u5f55\u5e76\u83b7\u53d6\u60a8\u7684 API \u5bc6\u94a5\u3002</p>"},{"location":"zh/getting-started/quickstart/#2-leanexplore-api","title":"\u6b65\u9aa4 2\uff1a\u914d\u7f6e\u60a8\u7684 LeanExplore API \u5bc6\u94a5","text":"<p>\u4e00\u65e6\u60a8\u6709\u4e86 API \u5bc6\u94a5\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u4f7f\u7528 LeanExplore CLI \u914d\u7f6e\u5b83\u3002\u8fd9\u5c06\u5b89\u5168\u5730\u4fdd\u5b58\u60a8\u7684\u5bc6\u94a5\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u8f93\u5165\u5b83\u3002</p> <p>\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>leanexplore configure api-key\n</code></pre> <p>\u7cfb\u7edf\u5c06\u63d0\u793a\u60a8\u7c98\u8d34\u60a8\u7684 API \u5bc6\u94a5\u3002\u8fd9\u662f\u4e00\u6b21\u6027\u8bbe\u7f6e\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5b8c\u6210\u4e86\u6b64\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4e0b\u4e00\u6b65\u3002</p>"},{"location":"zh/getting-started/quickstart/#3","title":"\u6b65\u9aa4 3\uff1a\u6267\u884c\u60a8\u7684\u7b2c\u4e00\u6b21\u641c\u7d22","text":"<p>\u914d\u7f6e\u4e86 API \u5bc6\u94a5\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u547d\u4ee4\u884c\u6267\u884c\u7b2c\u4e00\u6b21\u641c\u7d22\u4e86\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u641c\u7d22\u4e00\u4e2a\u8457\u540d\u7684\u5b9a\u7406\uff1a</p> <pre><code>leanexplore search \"fundamental theorem of calculus\"\n</code></pre> <p>\u60a8\u5e94\u8be5\u770b\u5230\u4e0e\u60a8\u7684\u67e5\u8be2\u5339\u914d\u7684\u76f8\u5173 Lean \u8bed\u53e5\u5217\u8868\uff0c\u4ee5\u53ca\u6e90\u6587\u4ef6\u3001\u884c\u53f7\u548c\u4ee3\u7801\u7247\u6bb5\u7b49\u8be6\u7ec6\u4fe1\u606f\u3002\u8fd9\u6f14\u793a\u4e86\u901a\u8fc7\u5176 API \u4f7f\u7528 LeanExplore \u7684\u76f4\u63a5\u641c\u7d22\u529f\u80fd\u3002</p>"},{"location":"zh/getting-started/quickstart/#4-ai-api","title":"\u6b65\u9aa4 4\uff1a\u5c1d\u8bd5 AI \u804a\u5929\uff08\u901a\u8fc7 API\uff09","text":"<p>LeanExplore \u8fd8\u63d0\u4f9b AI \u9a71\u52a8\u7684\u804a\u5929\u52a9\u624b\uff0c\u4ee5\u66f4\u4ea4\u4e92\u7684\u65b9\u5f0f\u63a2\u7d22 Lean \u4ee3\u7801\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u914d\u7f6e\u4e86\u60a8\u7684 LeanExplore API \u5bc6\u94a5\uff0c\u804a\u5929\u5c06\u4f7f\u7528 API \u540e\u7aef\u3002\u5bf9\u4e8e AI \u529f\u80fd\uff0c\u60a8\u8fd8\u9700\u8981\u4e00\u4e2a OpenAI API \u5bc6\u94a5\u3002</p>"},{"location":"zh/getting-started/quickstart/#4a-openai-api","title":"4a. \u914d\u7f6e OpenAI API \u5bc6\u94a5\uff08\u5982\u679c\u9700\u8981\uff09","text":"<p>\u5982\u679c\u60a8\u5c1a\u672a\u4f7f\u7528 LeanExplore \u8bbe\u7f6e OpenAI API \u5bc6\u94a5\uff0c\u8bf7\u8fd0\u884c\uff1a</p> <pre><code>leanexplore configure openai-key\n</code></pre> <p>\u6309\u7167\u63d0\u793a\u64cd\u4f5c\u3002\u5982\u679c\u6b64\u5bc6\u94a5\u5df2\u914d\u7f6e\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7\u6b64\u5b50\u6b65\u9aa4\u3002</p>"},{"location":"zh/getting-started/quickstart/#4b","title":"4b. \u542f\u52a8\u804a\u5929\u4f1a\u8bdd","text":"<p>\u73b0\u5728\uff0c\u542f\u52a8 AI \u804a\u5929\u52a9\u624b\uff1a</p> <pre><code>leanexplore chat\n</code></pre> <p>\u7531\u4e8e\u60a8\u7684 LeanExplore API \u5bc6\u94a5\u5df2\u914d\u7f6e\u4e14 <code>--backend api</code> \u662f\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u52a9\u624b\u5c06\u4f7f\u7528\u8fdc\u7a0b API \u83b7\u53d6\u5176 Lean \u7279\u5b9a\u77e5\u8bc6\u3002</p>"},{"location":"zh/getting-started/quickstart/#4c","title":"4c. \u63d0\u51fa\u95ee\u9898","text":"<p>\u804a\u5929\u754c\u9762\u52a0\u8f7d\u5e76\u4e14\u52a9\u624b\u51c6\u5907\u5c31\u7eea\u540e\uff0c\u5c1d\u8bd5\u8981\u6c42\u5b83\u67e5\u627e\u7279\u5b9a\u5b9a\u4e49\u53ca\u5176\u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982\uff1a</p>"},{"location":"zh/mcp/agents/","title":"\u7528\u4e8e AI \u4ee3\u7406\u7684 LeanExplore MCP \u670d\u52a1\u5668","text":"<p>LeanExplore \u5305\u542b\u4e00\u4e2a\u6a21\u578b\u4e0a\u4e0b\u6587\u534f\u8bae (MCP) \u670d\u52a1\u5668\uff0c\u65e8\u5728\u5c06\u5176\u5f3a\u5927\u7684\u641c\u7d22\u548c\u6570\u636e\u68c0\u7d22\u529f\u80fd\u4f5c\u4e3a \u5de5\u5177 \u516c\u5f00\u7ed9 AI \u4ee3\u7406\u4f7f\u7528\u3002\u8fd9\u4f7f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u6784\u5efa\u667a\u80fd\u5e94\u7528\u7a0b\u5e8f\u2014\u2014\u4f8b\u5982\uff0c\u4f7f\u7528 <code>openai-agents</code> \u5e93\u6216\u5176\u4ed6\u4ee3\u7406\u6846\u67b6\u7684\u5e94\u7528\u7a0b\u5e8f\u2014\u2014\u53ef\u4ee5\u901a\u8fc7 LeanExplore \u4ee5\u7f16\u7a0b\u65b9\u5f0f\u4e0e Lean 4 \u4ee3\u7801\u5e93\u4ea4\u4e92\u5e76\u8fdb\u884c\u63a8\u7406\u3002</p>"},{"location":"zh/mcp/agents/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u7528\u4e8e AI \u4ee3\u7406\u7684 LeanExplore MCP \u670d\u52a1\u5668</li> <li>\u76ee\u5f55</li> <li>LeanExplore MCP \u670d\u52a1\u5668\u6982\u8ff0</li> <li>\u4e0e MCP \u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u96c6\u6210</li> <li>\u8fd0\u884c LeanExplore MCP \u670d\u52a1\u5668<ul> <li>\u547d\u4ee4\u8c03\u7528</li> <li>\u5173\u952e\u547d\u4ee4\u884c\u9009\u9879</li> <li>\u670d\u52a1\u5668\u884c\u4e3a</li> </ul> </li> <li>\u4e3a AI \u4ee3\u7406\u516c\u5f00\u7684\u5de5\u5177<ul> <li>\u5de5\u5177\uff1a<code>search</code></li> <li>\u5de5\u5177\uff1a<code>get_by_id</code></li> <li>\u5de5\u5177\uff1a<code>get_dependencies</code></li> </ul> </li> <li>\u4e0e <code>leanexplore chat</code> \u7684\u5173\u7cfb</li> <li>\u81ea\u5b9a\u4e49\u4ee3\u7406\u5f00\u53d1\u4eba\u5458\u6ce8\u610f\u4e8b\u9879</li> </ul>"},{"location":"zh/mcp/agents/#leanexplore-mcp","title":"LeanExplore MCP \u670d\u52a1\u5668\u6982\u8ff0","text":"<p>LeanExplore MCP \u670d\u52a1\u5668\u5145\u5f53 AI \u4ee3\u7406\u7684\u4e13\u7528\u63a5\u53e3\u3002\u5b83\u76d1\u542c\u8bf7\u6c42\uff0c\u901a\u5e38\u683c\u5f0f\u5316\u4e3a JSON-RPC 2.0 \u6d88\u606f\uff0c\u901a\u8fc7 \u6807\u51c6\u8f93\u5165/\u8f93\u51fa (stdio)\u3002\u5f53\u4ee3\u7406\u53d1\u9001\u4f7f\u7528\u5de5\u5177\u7684\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u5c06\u5176\u8f6c\u6362\u4e3a LeanExplore \u7cfb\u7edf\u5185\u7684\u64cd\u4f5c\u2014\u2014\u6839\u636e\u5176\u914d\u7f6e\u67e5\u8be2\u8fdc\u7a0b LeanExplore API \u6216\u60a8\u7684\u672c\u5730\u6570\u636e\u540e\u7aef\u3002</p> <p>\u5904\u7406\u8bf7\u6c42\u540e\uff0c\u670d\u52a1\u5668\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4ee3\u7406\uff0c\u5141\u8bb8\u52a8\u6001\u7684\u7f16\u7a0b\u4ea4\u4e92\u3002\u6b64\u670d\u52a1\u5668\u4f7f\u7528 <code>FastMCP</code> \u5e93\u6784\u5efa\uff0c\u8be5\u5e93\u662f\u66f4\u5e7f\u6cdb\u7684 MCP Python SDK \u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"zh/mcp/agents/#mcp","title":"\u4e0e MCP \u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u96c6\u6210","text":"<p>LeanExplore MCP \u670d\u52a1\u5668\u53ef\u4ee5\u4f5c\u4e3a\u5de5\u5177\u63d0\u4f9b\u8005\u4e0e\u5404\u79cd\u517c\u5bb9 MCP \u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u3002\u8fd9\u4e9b\u5ba2\u6237\u7aef\u5141\u8bb8\u60a8\u4ece\u7edf\u4e00\u754c\u9762\u7ba1\u7406\u591a\u4e2a AI \u5de5\u5177\u548c\u6a21\u578b\u5e76\u4e0e\u4e4b\u4ea4\u4e92\u3002\u6b64\u7c7b\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u793a\u4f8b\u662f Claude Desktop\u3002</p> <p>\u8981\u914d\u7f6e\u50cf Claude Desktop \u8fd9\u6837\u7684 MCP \u5ba2\u6237\u7aef\u4ee5\u4f7f\u7528 LeanExplore MCP \u670d\u52a1\u5668\uff0c\u60a8\u901a\u5e38\u9700\u8981\u63d0\u4f9b\u6307\u5b9a\u5982\u4f55\u542f\u52a8\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002\u4ee5\u4e0b\u662f\u6b64\u7c7b\u914d\u7f6e\u5728\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\uff08\u901a\u5e38\u662f JSON \u6587\u4ef6\uff09\u4e2d\u7684\u793a\u4f8b\uff1a</p> <pre><code>{\n  \"mcpServers\": {\n    \"leanexploreAPI\": {\n      \"command\": \"/path/to/your/leanexplore/package\",\n      \"args\": [\n        \"mcp\",\n        \"serve\",\n        \"--backend\",\n        \"api\",\n        \"--api-key\",\n        \"YOUR_ACTUAL_LEANEXPLORE_API_KEY\"\n      ]\n    }\n  }\n}\n</code></pre> <p>\u5728 MCP \u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u6b64\u914d\u7f6e\u540e\uff0c\u5b83\u5e94\u8be5\u80fd\u591f\u5c06 LeanExplore \u5217\u4e3a\u53ef\u7528\u7684\u5de5\u5177\u63d0\u4f9b\u8005\uff0c\u5e76\u4f7f\u7528\u670d\u52a1\u5668\u516c\u5f00\u7684\u5de5\u5177\uff08<code>search</code>\u3001<code>get_by_id</code>\u3001<code>get_dependencies</code>\uff09\u3002</p> <p>\u6709\u5173\u8bbe\u7f6e\u50cf Claude Desktop \u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0e MCP \u670d\u52a1\u5668\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u5176\u7279\u5b9a\u6587\u6863\u3002\u5bf9\u4e8e Claude Desktop\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u5feb\u901f\u5165\u95e8\u6307\u5357\u4e2d\u627e\u5230\u4fe1\u606f\u3002</p>"},{"location":"zh/mcp/agents/#leanexplore-mcp_1","title":"\u8fd0\u884c LeanExplore MCP \u670d\u52a1\u5668","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>leanexplore mcp serve</code> \u547d\u4ee4\u76f4\u63a5\u4ece\u547d\u4ee4\u884c\u542f\u52a8 MCP \u670d\u52a1\u5668\u3002\u6b64\u547d\u4ee4\u9002\u7528\u4e8e\u6784\u5efa\u6216\u8fde\u63a5\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49 MCP \u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6216 AI \u4ee3\u7406\u7684\u5f00\u53d1\u4eba\u5458\u3002</p>"},{"location":"zh/mcp/agents/#_2","title":"\u547d\u4ee4\u8c03\u7528","text":"<p>\u4ee5\u4e0b\u662f\u542f\u52a8\u670d\u52a1\u5668\u7684\u5178\u578b\u65b9\u5f0f\uff1a</p> <pre><code># \u4f7f\u7528 API \u540e\u7aef\u542f\u52a8\u670d\u52a1\u5668\uff08\u9ed8\u8ba4\uff09\n# \u9700\u8981\u914d\u7f6e LeanExplore API \u5bc6\u94a5\u6216\u901a\u8fc7 --api-key \u4f20\u9012\nleanexplore mcp serve --backend api\n\n# \u4f7f\u7528\u60a8\u7684\u672c\u5730\u6570\u636e\u540e\u7aef\u542f\u52a8\u670d\u52a1\u5668\n# \u9700\u8981\u901a\u8fc7 'leanexplore data fetch' \u83b7\u53d6\u672c\u5730\u6570\u636e\nleanexplore mcp serve --backend local\n\n# \u4f7f\u7528\u7279\u5b9a API \u5bc6\u94a5\u548c API \u540e\u7aef\u8c03\u8bd5\u65e5\u5fd7\u8bb0\u5f55\u7684\u793a\u4f8b\nleanexplore mcp serve --backend api --api-key YOUR_LE_API_KEY --log-level DEBUG\n</code></pre>"},{"location":"zh/mcp/agents/#_3","title":"\u5173\u952e\u547d\u4ee4\u884c\u9009\u9879","text":"<ul> <li><code>--backend {api|local}</code>\uff08\u522b\u540d\uff1a<code>-b</code>\uff09\u786e\u5b9a\u670d\u52a1\u5668\u5de5\u5177\u7684\u6570\u636e\u6e90\uff1a</li> <li><code>api</code>\uff1a\u5de5\u5177\u5c06\u67e5\u8be2\u8fdc\u7a0b LeanExplore API\u3002\u5148\u51b3\u6761\u4ef6\uff1a \u5fc5\u987b\u914d\u7f6e\u6709\u6548\u7684 LeanExplore API \u5bc6\u94a5\uff08\u901a\u8fc7 <code>leanexplore configure api-key</code>\uff09\u6216\u4f7f\u7528 <code>--api-key</code> \u9009\u9879\u76f4\u63a5\u63d0\u4f9b\u3002\u6b64\u540e\u7aef\u901a\u5e38\u63d0\u4f9b\u5bf9\u6700\u65b0\u6570\u636e\u7684\u8bbf\u95ee\u5e76\u5378\u8f7d\u8ba1\u7b97\u3002</li> <li><code>local</code>\uff1a\u5de5\u5177\u5c06\u4f7f\u7528\u60a8\u672c\u5730\u4e0b\u8f7d\u7684\u6570\u636e\u8d44\u4ea7\uff08SQLite \u6570\u636e\u5e93\u3001FAISS \u7d22\u5f15\uff09\u3002\u5148\u51b3\u6761\u4ef6\uff1a \u60a8\u5fc5\u987b\u9996\u5148\u4f7f\u7528 <code>leanexplore data fetch</code> \u4e0b\u8f7d\u6570\u636e\u5de5\u5177\u94fe\u3002\u6b64\u540e\u7aef\u5141\u8bb8\u79bb\u7ebf\u4f7f\u7528\u5e76\u5b8c\u5168\u63a7\u5236\u6570\u636e\u7248\u672c\u3002</li> <li><code>--api-key TEXT</code>\uff08\u53ef\u9009\uff09\u5982\u679c\u4f7f\u7528 <code>--backend api</code>\uff0c\u6b64\u9009\u9879\u5141\u8bb8\u60a8\u76f4\u63a5\u4e3a\u5f53\u524d\u670d\u52a1\u5668\u4f1a\u8bdd\u63d0\u4f9b LeanExplore API \u5bc6\u94a5\uff0c\u8986\u76d6\u4efb\u4f55\u5168\u5c40\u914d\u7f6e\u7684\u5bc6\u94a5\u3002</li> <li><code>--log-level {DEBUG|INFO|WARNING|ERROR|CRITICAL}</code> \u8bbe\u7f6e\u670d\u52a1\u5668\u7684\u65e5\u5fd7\u8bb0\u5f55\u8be6\u7ec6\u7a0b\u5ea6\u3002\u4f7f\u7528 <code>DEBUG</code> \u6709\u52a9\u4e8e\u6545\u969c\u6392\u9664\u3002\u9ed8\u8ba4\u901a\u5e38\u662f <code>ERROR</code> \u6216 <code>WARNING</code> \u4ee5\u6700\u5c0f\u5316\u566a\u97f3\u3002</li> </ul>"},{"location":"zh/mcp/agents/#_4","title":"\u670d\u52a1\u5668\u884c\u4e3a","text":"<p>\u542f\u52a8\u65f6\uff0c<code>leanexplore mcp serve</code> \u547d\u4ee4\u5728\u524d\u53f0\u8fde\u7eed\u8fd0\u884c\u670d\u52a1\u5668\u3002\u5b83\u63a5\u7ba1\u60a8\u7ec8\u7aef\u7684\u6807\u51c6\u8f93\u5165\u548c\u8f93\u51fa (stdio) \u4ee5\u4e0e\u8fde\u63a5\u7684 MCP \u5ba2\u6237\u7aef\u901a\u4fe1\u3002</p> <p>\u8981\u505c\u6b62\u670d\u52a1\u5668\uff0c\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u5e94\u542f\u52a8\u65ad\u5f00\u8fde\u63a5\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u624b\u52a8\u7ec8\u6b62\u670d\u52a1\u5668\u8fdb\u7a0b\uff08\u901a\u5e38\u4f7f\u7528 Ctrl+C\uff09\u3002</p>"},{"location":"zh/mcp/agents/#ai","title":"\u4e3a AI \u4ee3\u7406\u516c\u5f00\u7684\u5de5\u5177","text":"<p>LeanExplore MCP \u670d\u52a1\u5668\u4f7f\u5176\u6838\u5fc3\u529f\u80fd\u4f5c\u4e3a\u53ef\u8c03\u7528\u7684\"\u5de5\u5177\"\u5bf9 AI \u4ee3\u7406\u53ef\u7528\u3002\u8fd9\u4e9b\u5de5\u5177\u5141\u8bb8\u4ee3\u7406\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u641c\u7d22\u548c\u68c0\u7d22\u6709\u5173 Lean \u8bed\u53e5\u7684\u4fe1\u606f\u3002\u8fd4\u56de\u6570\u636e\u9879\u7684\u7ed3\u6784\uff08\u4e0b\u9762\u79f0\u4e3a <code>ResultItem</code>\uff09\u5728\u8fd4\u56de\u8bed\u53e5\u7ec4\u4fe1\u606f\u7684\u5de5\u5177\u4e4b\u95f4\u662f\u4e00\u81f4\u7684\u3002</p> <p><code>ResultItem</code> \u5bf9\u8c61\u5305\u62ec\u4ee5\u4e0b\u5b57\u6bb5\uff1a</p> <ul> <li><code>id: integer</code> - \u8bed\u53e5\u7ec4\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002</li> <li><code>primary_declaration: object | null</code> - \u6709\u5173\u4e3b\u8981\u58f0\u660e\u7684\u4fe1\u606f\uff1a</li> <li><code>lean_name: string | null</code> - \u5b8c\u6574\u7684 Lean \u540d\u79f0\uff08\u4f8b\u5982\uff0c\"Nat.add\"\uff09\u3002</li> <li><code>source_file: string</code> - \u6e90\u6587\u4ef6\u8def\u5f84\uff08\u4f8b\u5982\uff0c\"Mathlib/Data/Nat/Basic.lean\"\uff09\u3002</li> <li><code>range_start_line: integer</code> - \u8bed\u53e5\u7ec4\u5728\u6e90\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u884c\u53f7\u3002</li> <li><code>statement_text: string</code> - \u8bed\u53e5\u7ec4\u7684\u5b8c\u6574\u89c4\u8303 Lean \u4ee3\u7801\u6587\u672c\u3002</li> <li><code>docstring: string | null</code> - \u4e0e\u8bed\u53e5\u7ec4\u5173\u8054\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff08\u5982\u679c\u53ef\u7528\uff09\u3002</li> <li><code>informal_description: string | null</code> - \u975e\u6b63\u5f0f\u7684\u3001\u4eba\u7c7b\u53ef\u8bfb\u7684\u63cf\u8ff0\uff08\u5982\u679c\u53ef\u7528\uff09\u3002</li> </ul>"},{"location":"zh/mcp/agents/#search","title":"\u5de5\u5177\uff1a<code>search</code>","text":"<ul> <li>\u76ee\u7684\uff1a \u4f7f\u4ee3\u7406\u80fd\u591f\u57fa\u4e8e\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u67e5\u627e Lean \u8bed\u53e5\u7ec4\u3002</li> <li>\u5173\u952e\u53c2\u6570\uff1a</li> <li><code>query: string</code>\uff08\u5fc5\u9700\uff09- \u81ea\u7136\u8bed\u8a00\u641c\u7d22\u67e5\u8be2\uff08\u4f8b\u5982\uff0c\"\u8fde\u7eed\u51fd\u6570\"\uff09\u3002</li> <li><code>package_filters: string[]</code>\uff08\u53ef\u9009\uff09- \u8981\u6309\u5176\u8fc7\u6ee4\u7ed3\u679c\u7684\u5305\u540d\u79f0\u5217\u8868\uff08\u4f8b\u5982\uff0c<code>[\"Mathlib.Analysis\", \"Mathlib.Order\"]</code>\uff09\u3002\u5982\u679c\u7701\u7565\u6216\u4e3a\u7a7a\uff0c\u5219\u4e0d\u5e94\u7528\u5305\u8fc7\u6ee4\u5668\u3002</li> <li><code>limit: integer</code>\uff08\u53ef\u9009\uff0c\u9ed8\u8ba4\uff1a10\uff09- \u8981\u8fd4\u56de\u7684\u6700\u5927\u641c\u7d22\u7ed3\u679c\u6570\u3002\u5fc5\u987b\u662f\u6b63\u6574\u6570\u3002</li> <li>\u8fd4\u56de\uff1a \u5305\u542b\u641c\u7d22\u7ed3\u679c\u548c\u5143\u6570\u636e\u7684\u5bf9\u8c61\uff0c\u5177\u6709\u4ee5\u4e0b\u5b57\u6bb5\uff1a</li> <li><code>query: string</code> - \u63d0\u4ea4\u7684\u539f\u59cb\u641c\u7d22\u67e5\u8be2\u5b57\u7b26\u4e32\u3002</li> <li><code>packages_applied: string[] | null</code> - \u5b9e\u9645\u5e94\u7528\u4e8e\u641c\u7d22\u7684\u5305\u8fc7\u6ee4\u5668\u5217\u8868\u3002</li> <li><code>results: ResultItem[]</code> - \u4e0e\u67e5\u8be2\u5339\u914d\u7684 <code>ResultItem</code> \u5bf9\u8c61\u5217\u8868\uff0c\u7ed3\u6784\u5982\u4e0a\u6240\u8ff0\u3002</li> <li><code>count: integer</code> - <code>results</code> \u5217\u8868\u4e2d\u63d0\u4f9b\u7684\u7ed3\u679c\u6570\uff08\u9075\u5b88 <code>limit</code> \u53c2\u6570\uff09\u3002</li> <li><code>total_candidates_considered: integer</code> - \u5728\u5de5\u5177\u5e94\u7528 <code>limit</code> \u4e4b\u524d\u540e\u7aef\u627e\u5230\u7684\u6f5c\u5728\u5019\u9009\u7ed3\u679c\u603b\u6570\u3002</li> <li><code>processing_time_ms: integer</code> - \u641c\u7d22\u8bf7\u6c42\u7684\u670d\u52a1\u5668\u7aef\u5904\u7406\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\u3002</li> </ul>"},{"location":"zh/mcp/agents/#get_by_id","title":"\u5de5\u5177\uff1a<code>get_by_id</code>","text":"<ul> <li>\u76ee\u7684\uff1a \u5141\u8bb8\u4ee3\u7406\u4f7f\u7528\u5176\u552f\u4e00 ID \u68c0\u7d22\u7279\u5b9a\u8bed\u53e5\u7ec4\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</li> <li>\u5173\u952e\u53c2\u6570\uff1a</li> <li><code>group_id: integer</code>\uff08\u5fc5\u9700\uff09- \u8981\u68c0\u7d22\u7684\u8bed\u53e5\u7ec4\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff08\u4f8b\u5982\uff0c<code>12345</code>\uff09\u3002</li> <li>\u8fd4\u56de\uff1a \u5982\u679c\u627e\u5230\u5177\u6709\u7ed9\u5b9a ID \u7684\u8bed\u53e5\u7ec4\uff0c\u5219\u8fd4\u56de\u5355\u4e2a <code>ResultItem</code> \u5bf9\u8c61\uff08\u7ed3\u6784\u5982\u4e0a\u6240\u8ff0\uff09\u3002\u5982\u679c\u4e0d\u5b58\u5728\u6b64\u7c7b\u7ec4\uff0c\u5219\u8fd4\u56de <code>null</code>\u3002</li> </ul>"},{"location":"zh/mcp/agents/#get_dependencies","title":"\u5de5\u5177\uff1a<code>get_dependencies</code>","text":"<ul> <li>\u76ee\u7684\uff1a \u4f7f\u4ee3\u7406\u80fd\u591f\u83b7\u53d6\u7ed9\u5b9a\u8bed\u53e5\u7ec4 ID \u7684\u76f4\u63a5\u4f9d\u8d56\u5173\u7cfb\uff08\u5373\uff0c\u88ab\u5f15\u7528\u6216\u4f9d\u8d56\u7684\u9879\u76ee\uff09\u3002</li> <li>\u5173\u952e\u53c2\u6570\uff1a</li> <li><code>group_id: integer</code>\uff08\u5fc5\u9700\uff09- \u8981\u83b7\u53d6\u4f9d\u8d56\u5173\u7cfb\u7684\u8bed\u53e5\u7ec4\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff08\u4f8b\u5982\uff0c<code>12345</code>\uff09\u3002</li> <li>\u8fd4\u56de\uff1a \u5982\u679c\u627e\u5230\uff0c\u5219\u5305\u542b\u4f9d\u8d56\u5173\u7cfb\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u4e3a <code>null</code>\u3002\u8be5\u5bf9\u8c61\u5177\u6709\u4ee5\u4e0b\u5b57\u6bb5\uff1a</li> <li><code>source_group_id: integer</code> - \u8bf7\u6c42\u4f9d\u8d56\u5173\u7cfb\u7684\u8bed\u53e5\u7ec4\u7684 ID\u3002</li> <li><code>citations: ResultItem[]</code> - \u8868\u793a\u76f4\u63a5\u4f9d\u8d56\u5173\u7cfb\u7684 <code>ResultItem</code> \u5bf9\u8c61\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u7684\u7ed3\u6784\u5982\u4e0a\u6240\u8ff0\u3002</li> <li><code>count: integer</code> - \u5728 <code>citations</code> \u5217\u8868\u4e2d\u627e\u5230\u5e76\u8fd4\u56de\u7684\u76f4\u63a5\u4f9d\u8d56\u5173\u7cfb\u6570\u3002</li> </ul> <p>\u5982\u679c\u672a\u627e\u5230\u6e90\u8bed\u53e5\u7ec4\u6216\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u5219\u8fd4\u56de <code>null</code>\u3002</p> <p>\u8bf4\u660e\u6027\u4ee3\u7406\u5de5\u4f5c\u6d41\u7a0b\uff1a AI \u4ee3\u7406\u53ef\u80fd\u9996\u5148\u4f7f\u7528 <code>search</code> \u5de5\u5177\u53d1\u73b0\u4e0e\u6982\u5ff5\u76f8\u5173\u7684\u8bed\u53e5\uff08\u4f8b\u5982\uff0c\"Frobenius \u540c\u6001\"\uff09\u3002\u4ece\u7ed3\u679c\u4e2d\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u770b\u8d77\u6765\u6700\u76f8\u5173\u7684\u8bed\u53e5 ID\u3002\u7136\u540e\uff0c\u5b83\u53ef\u80fd\u8c03\u7528 <code>get_by_id</code> \u6765\u68c0\u7d22\u8be5\u8bed\u53e5\u7684\u5b8c\u6574 Lean \u4ee3\u7801\uff0c\u7136\u540e\u8c03\u7528 <code>get_dependencies</code> \u6765\u4e86\u89e3\u5176\u76f4\u63a5\u4e0a\u4e0b\u6587\u548c\u5b83\u4f9d\u8d56\u7684\u5b9a\u4e49\u3002\u8fd9\u4e2a\u5e8f\u5217\u5141\u8bb8\u4ee3\u7406\u6536\u96c6\u5168\u9762\u7684\u4fe1\u606f\u7528\u4e8e\u63a8\u7406\u6216\u89e3\u91ca\u4efb\u52a1\u3002</p>"},{"location":"zh/mcp/agents/#leanexplore-chat","title":"\u4e0e <code>leanexplore chat</code> \u7684\u5173\u7cfb","text":"<p><code>leanexplore chat</code> \u547d\u4ee4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5373\u7528\u578b AI \u52a9\u624b\u7528\u4e8e\u4ea4\u4e92\u5f0f\u63a2\u7d22\u3002\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0c\u6b64\u804a\u5929\u547d\u4ee4 \u5728\u5185\u90e8\u7ba1\u7406\u5176\u81ea\u5df1\u7684 LeanExplore MCP \u670d\u52a1\u5668\u5b9e\u4f8b \u5e76\u5145\u5f53\u5176 MCP \u5ba2\u6237\u7aef\u3002</p> <p>\u56e0\u6b64\uff0c\u60a8\u4e0d\u9700\u8981\u5355\u72ec\u8fd0\u884c <code>leanexplore mcp serve</code> \u6765\u4f7f\u7528 <code>leanexplore chat</code> \u529f\u80fd\u3002<code>leanexplore mcp serve</code> \u547d\u4ee4\u4e13\u95e8\u7528\u4e8e\u5e0c\u671b\u5c06\u4ed6\u4eec \u81ea\u5df1\u7684 \u81ea\u5b9a\u4e49 AI \u4ee3\u7406\u6216\u5176\u4ed6 MCP \u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230 LeanExplore \u5de5\u5177\u96c6\u7684\u5f00\u53d1\u4eba\u5458\u3002</p>"},{"location":"zh/mcp/agents/#_5","title":"\u81ea\u5b9a\u4e49\u4ee3\u7406\u5f00\u53d1\u4eba\u5458\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u901a\u4fe1\u534f\u8bae\uff1a LeanExplore MCP \u670d\u52a1\u5668\u4f7f\u7528\u901a\u8fc7 \u6807\u51c6\u8f93\u5165/\u8f93\u51fa (stdio) \u4ea4\u6362\u7684 JSON-RPC 2.0 \u6d88\u606f\u8fdb\u884c\u901a\u4fe1\u3002\u60a8\u7684\u81ea\u5b9a\u4e49\u4ee3\u7406\u5ba2\u6237\u7aef\u5fc5\u987b\u80fd\u591f\u751f\u6210\u670d\u52a1\u5668\u8fdb\u7a0b\u5e76\u901a\u8fc7\u5176 stdin/stdout \u6d41\u4e0e\u5176\u901a\u4fe1\u3002</li> <li>\u5ba2\u6237\u7aef\u5b9e\u73b0\uff1a \u8981\u4e0e\u6b64\u670d\u52a1\u5668\u4ea4\u4e92\uff0c\u60a8\u9700\u8981\u4e00\u4e2a MCP \u5ba2\u6237\u7aef\u3002MCP Python SDK\uff08\u63d0\u4f9b LeanExplore \u4f7f\u7528\u7684 <code>mcp</code> \u5e93\uff09\u5305\u62ec\u7528\u4e8e\u6784\u5efa\u6b64\u7c7b\u5ba2\u6237\u7aef\u7684\u5b9e\u7528\u7a0b\u5e8f\uff0c\u5982 <code>ClientSession</code> \u548c <code>stdio_client</code>\u3002\u50cf <code>openai-agents</code> \u8fd9\u6837\u7684\u6846\u67b6\u4e5f\u8bbe\u8ba1\u4e3a\u4e0e\u517c\u5bb9 MCP \u7684\u670d\u52a1\u5668\u4e00\u8d77\u5de5\u4f5c\u3002</li> <li>\u5de5\u5177\u6a21\u5f0f\uff08Pydantic \u6a21\u578b\uff09\uff1a \u867d\u7136\u6b64\u9875\u9762\u63d0\u4f9b\u4e86\u5de5\u5177\u53c2\u6570\u548c\u8fd4\u56de\u7ed3\u6784\u7684\u6982\u8ff0\uff0c\u4f46\u7cbe\u786e\u5b9a\u4e49\u5b9e\u73b0\u4e3a Pydantic \u6a21\u578b\u3002\u9700\u8981\u786e\u5207\u6a21\u578b\u6a21\u5f0f\u7684\u5f00\u53d1\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u7528\u4e8e\u5f3a\u5927\u7684\u5ba2\u6237\u7aef\u9a8c\u8bc1\u6216\u4ee3\u7801\u751f\u6210\uff09\u5e94\u53c2\u8003 LeanExplore Python \u5305\u4e2d <code>lean_explore.shared.models.api.py</code> \u6a21\u5757\uff08\u7528\u4e8e\u54cd\u5e94\u6570\u636e\u7ed3\u6784\uff0c\u5982 <code>APISearchResultItem</code>\u3001<code>APISearchResponse</code>\u3001<code>APICitationsResponse</code>\uff09\u548c <code>lean_explore.mcp.tools.py</code>\uff08\u7528\u4e8e\u5de5\u5177\u51fd\u6570\u7b7e\u540d\uff09\u4e2d\u7684\u6e90\u4ee3\u7801\u3002\u4ee3\u7406\u8c03\u7528\u7684\u5de5\u5177\u540d\u79f0\uff08\u4f8b\u5982\uff0c\"search\"\uff09\u5bf9\u5e94\u4e8e\u6ce8\u518c\u4e3a\u5de5\u5177\u7684\u51fd\u6570\u540d\u79f0\u3002</li> <li>\u670d\u52a1\u5668\u95ee\u9898\u6545\u969c\u6392\u9664\uff1a \u5982\u679c\u60a8\u5728\u81ea\u5b9a\u4e49\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u65f6\u9047\u5230\u95ee\u9898\uff0c\u4f7f\u7528 <code>--log-level DEBUG</code> \u9009\u9879\u8fd0\u884c <code>leanexplore mcp serve</code> \u53ef\u4ee5\u63d0\u4f9b\u6765\u81ea\u670d\u52a1\u5668\u7aef\u7684\u8be6\u7ec6\u65e5\u5fd7\uff0c\u8fd9\u5bf9\u4e8e\u8bca\u65ad\u4e0e\u670d\u52a1\u5668\u542f\u52a8\u3001\u540e\u7aef\u8fde\u63a5\u6216\u5de5\u5177\u6267\u884c\u76f8\u5173\u7684\u95ee\u9898\u975e\u5e38\u5b9d\u8d35\u3002</li> </ul> <p>\u901a\u8fc7\u63d0\u4f9b\u6b64 MCP \u63a5\u53e3\uff0cLeanExplore \u65e8\u5728\u6210\u4e3a\u6570\u5b66\u7814\u7a76\u548c Lean \u5f00\u53d1\u7684 AI \u5de5\u5177\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5b9d\u8d35\u7ec4\u4ef6\uff0c\u4f7f\u5bf9\u5176\u7d22\u5f15\u7684 Lean \u4ee3\u7801\u77e5\u8bc6\u5e93\u7684\u590d\u6742\u7f16\u7a0b\u8bbf\u95ee\u6210\u4e3a\u53ef\u80fd\u3002</p>"}]}